# coding: utf-8

"""
    localhost:8088

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AsteriskApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def asterisk_config_dynamic_config_class_object_type_id_delete(self, config_class, object_type, id, **kwargs):  # noqa: E501
        """Delete a dynamic configuration object.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asterisk_config_dynamic_config_class_object_type_id_delete(config_class, object_type, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str config_class: The configuration class containing dynamic configuration objects. (required)
        :param str object_type: The type of configuration object to delete. (required)
        :param str id: The unique identifier of the object to delete. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asterisk_config_dynamic_config_class_object_type_id_delete_with_http_info(config_class, object_type, id, **kwargs)  # noqa: E501
        else:
            (data) = self.asterisk_config_dynamic_config_class_object_type_id_delete_with_http_info(config_class, object_type, id, **kwargs)  # noqa: E501
            return data

    def asterisk_config_dynamic_config_class_object_type_id_delete_with_http_info(self, config_class, object_type, id, **kwargs):  # noqa: E501
        """Delete a dynamic configuration object.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asterisk_config_dynamic_config_class_object_type_id_delete_with_http_info(config_class, object_type, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str config_class: The configuration class containing dynamic configuration objects. (required)
        :param str object_type: The type of configuration object to delete. (required)
        :param str id: The unique identifier of the object to delete. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['config_class', 'object_type', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asterisk_config_dynamic_config_class_object_type_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'config_class' is set
        if ('config_class' not in params or
                params['config_class'] is None):
            raise ValueError("Missing the required parameter `config_class` when calling `asterisk_config_dynamic_config_class_object_type_id_delete`")  # noqa: E501
        # verify the required parameter 'object_type' is set
        if ('object_type' not in params or
                params['object_type'] is None):
            raise ValueError("Missing the required parameter `object_type` when calling `asterisk_config_dynamic_config_class_object_type_id_delete`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `asterisk_config_dynamic_config_class_object_type_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'config_class' in params:
            path_params['configClass'] = params['config_class']  # noqa: E501
        if 'object_type' in params:
            path_params['objectType'] = params['object_type']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/asterisk/config/dynamic/{configClass}/{objectType}/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asterisk_config_dynamic_config_class_object_type_id_get(self, config_class, object_type, id, **kwargs):  # noqa: E501
        """Retrieve a dynamic configuration object.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asterisk_config_dynamic_config_class_object_type_id_get(config_class, object_type, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str config_class: The configuration class containing dynamic configuration objects. (required)
        :param str object_type: The type of configuration object to retrieve. (required)
        :param str id: The unique identifier of the object to retrieve. (required)
        :return: list[ConfigTuple]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asterisk_config_dynamic_config_class_object_type_id_get_with_http_info(config_class, object_type, id, **kwargs)  # noqa: E501
        else:
            (data) = self.asterisk_config_dynamic_config_class_object_type_id_get_with_http_info(config_class, object_type, id, **kwargs)  # noqa: E501
            return data

    def asterisk_config_dynamic_config_class_object_type_id_get_with_http_info(self, config_class, object_type, id, **kwargs):  # noqa: E501
        """Retrieve a dynamic configuration object.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asterisk_config_dynamic_config_class_object_type_id_get_with_http_info(config_class, object_type, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str config_class: The configuration class containing dynamic configuration objects. (required)
        :param str object_type: The type of configuration object to retrieve. (required)
        :param str id: The unique identifier of the object to retrieve. (required)
        :return: list[ConfigTuple]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['config_class', 'object_type', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asterisk_config_dynamic_config_class_object_type_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'config_class' is set
        if ('config_class' not in params or
                params['config_class'] is None):
            raise ValueError("Missing the required parameter `config_class` when calling `asterisk_config_dynamic_config_class_object_type_id_get`")  # noqa: E501
        # verify the required parameter 'object_type' is set
        if ('object_type' not in params or
                params['object_type'] is None):
            raise ValueError("Missing the required parameter `object_type` when calling `asterisk_config_dynamic_config_class_object_type_id_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `asterisk_config_dynamic_config_class_object_type_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'config_class' in params:
            path_params['configClass'] = params['config_class']  # noqa: E501
        if 'object_type' in params:
            path_params['objectType'] = params['object_type']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/asterisk/config/dynamic/{configClass}/{objectType}/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ConfigTuple]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asterisk_config_dynamic_config_class_object_type_id_put(self, config_class, object_type, id, **kwargs):  # noqa: E501
        """Create or update a dynamic configuration object.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asterisk_config_dynamic_config_class_object_type_id_put(config_class, object_type, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str config_class: The configuration class containing dynamic configuration objects. (required)
        :param str object_type: The type of configuration object to create or update. (required)
        :param str id: The unique identifier of the object to create or update. (required)
        :param list[ConfigTuple] fields: The body object should have a value that is a list of ConfigTuples, which provide the fields to update. Ex. [ { \"attribute\": \"directmedia\", \"value\": \"false\" } ]
        :return: list[ConfigTuple]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asterisk_config_dynamic_config_class_object_type_id_put_with_http_info(config_class, object_type, id, **kwargs)  # noqa: E501
        else:
            (data) = self.asterisk_config_dynamic_config_class_object_type_id_put_with_http_info(config_class, object_type, id, **kwargs)  # noqa: E501
            return data

    def asterisk_config_dynamic_config_class_object_type_id_put_with_http_info(self, config_class, object_type, id, **kwargs):  # noqa: E501
        """Create or update a dynamic configuration object.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asterisk_config_dynamic_config_class_object_type_id_put_with_http_info(config_class, object_type, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str config_class: The configuration class containing dynamic configuration objects. (required)
        :param str object_type: The type of configuration object to create or update. (required)
        :param str id: The unique identifier of the object to create or update. (required)
        :param list[ConfigTuple] fields: The body object should have a value that is a list of ConfigTuples, which provide the fields to update. Ex. [ { \"attribute\": \"directmedia\", \"value\": \"false\" } ]
        :return: list[ConfigTuple]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['config_class', 'object_type', 'id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asterisk_config_dynamic_config_class_object_type_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'config_class' is set
        if ('config_class' not in params or
                params['config_class'] is None):
            raise ValueError("Missing the required parameter `config_class` when calling `asterisk_config_dynamic_config_class_object_type_id_put`")  # noqa: E501
        # verify the required parameter 'object_type' is set
        if ('object_type' not in params or
                params['object_type'] is None):
            raise ValueError("Missing the required parameter `object_type` when calling `asterisk_config_dynamic_config_class_object_type_id_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `asterisk_config_dynamic_config_class_object_type_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'config_class' in params:
            path_params['configClass'] = params['config_class']  # noqa: E501
        if 'object_type' in params:
            path_params['objectType'] = params['object_type']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'fields' in params:
            body_params = params['fields']
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/asterisk/config/dynamic/{configClass}/{objectType}/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ConfigTuple]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asterisk_info_get(self, **kwargs):  # noqa: E501
        """Gets Asterisk system information.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asterisk_info_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] only: Filter information returned
        :return: AsteriskInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asterisk_info_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.asterisk_info_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def asterisk_info_get_with_http_info(self, **kwargs):  # noqa: E501
        """Gets Asterisk system information.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asterisk_info_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] only: Filter information returned
        :return: AsteriskInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['only']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asterisk_info_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'only' in params:
            query_params.append(('only', params['only']))  # noqa: E501
            collection_formats['only'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/asterisk/info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AsteriskInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asterisk_logging_get(self, **kwargs):  # noqa: E501
        """Gets Asterisk log channel information.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asterisk_logging_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[LogChannel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asterisk_logging_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.asterisk_logging_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def asterisk_logging_get_with_http_info(self, **kwargs):  # noqa: E501
        """Gets Asterisk log channel information.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asterisk_logging_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[LogChannel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asterisk_logging_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/asterisk/logging', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[LogChannel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asterisk_logging_log_channel_name_delete(self, log_channel_name, **kwargs):  # noqa: E501
        """Deletes a log channel.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asterisk_logging_log_channel_name_delete(log_channel_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str log_channel_name: Log channels name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asterisk_logging_log_channel_name_delete_with_http_info(log_channel_name, **kwargs)  # noqa: E501
        else:
            (data) = self.asterisk_logging_log_channel_name_delete_with_http_info(log_channel_name, **kwargs)  # noqa: E501
            return data

    def asterisk_logging_log_channel_name_delete_with_http_info(self, log_channel_name, **kwargs):  # noqa: E501
        """Deletes a log channel.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asterisk_logging_log_channel_name_delete_with_http_info(log_channel_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str log_channel_name: Log channels name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['log_channel_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asterisk_logging_log_channel_name_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'log_channel_name' is set
        if ('log_channel_name' not in params or
                params['log_channel_name'] is None):
            raise ValueError("Missing the required parameter `log_channel_name` when calling `asterisk_logging_log_channel_name_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'log_channel_name' in params:
            path_params['logChannelName'] = params['log_channel_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/asterisk/logging/{logChannelName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asterisk_logging_log_channel_name_post(self, log_channel_name, configuration, **kwargs):  # noqa: E501
        """Adds a log channel.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asterisk_logging_log_channel_name_post(log_channel_name, configuration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str log_channel_name: The log channel to add (required)
        :param str configuration: levels of the log channel (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asterisk_logging_log_channel_name_post_with_http_info(log_channel_name, configuration, **kwargs)  # noqa: E501
        else:
            (data) = self.asterisk_logging_log_channel_name_post_with_http_info(log_channel_name, configuration, **kwargs)  # noqa: E501
            return data

    def asterisk_logging_log_channel_name_post_with_http_info(self, log_channel_name, configuration, **kwargs):  # noqa: E501
        """Adds a log channel.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asterisk_logging_log_channel_name_post_with_http_info(log_channel_name, configuration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str log_channel_name: The log channel to add (required)
        :param str configuration: levels of the log channel (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['log_channel_name', 'configuration']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asterisk_logging_log_channel_name_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'log_channel_name' is set
        if ('log_channel_name' not in params or
                params['log_channel_name'] is None):
            raise ValueError("Missing the required parameter `log_channel_name` when calling `asterisk_logging_log_channel_name_post`")  # noqa: E501
        # verify the required parameter 'configuration' is set
        if ('configuration' not in params or
                params['configuration'] is None):
            raise ValueError("Missing the required parameter `configuration` when calling `asterisk_logging_log_channel_name_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'log_channel_name' in params:
            path_params['logChannelName'] = params['log_channel_name']  # noqa: E501

        query_params = []
        if 'configuration' in params:
            query_params.append(('configuration', params['configuration']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/asterisk/logging/{logChannelName}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asterisk_logging_log_channel_name_rotate_put(self, log_channel_name, **kwargs):  # noqa: E501
        """Rotates a log channel.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asterisk_logging_log_channel_name_rotate_put(log_channel_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str log_channel_name: Log channel's name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asterisk_logging_log_channel_name_rotate_put_with_http_info(log_channel_name, **kwargs)  # noqa: E501
        else:
            (data) = self.asterisk_logging_log_channel_name_rotate_put_with_http_info(log_channel_name, **kwargs)  # noqa: E501
            return data

    def asterisk_logging_log_channel_name_rotate_put_with_http_info(self, log_channel_name, **kwargs):  # noqa: E501
        """Rotates a log channel.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asterisk_logging_log_channel_name_rotate_put_with_http_info(log_channel_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str log_channel_name: Log channel's name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['log_channel_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asterisk_logging_log_channel_name_rotate_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'log_channel_name' is set
        if ('log_channel_name' not in params or
                params['log_channel_name'] is None):
            raise ValueError("Missing the required parameter `log_channel_name` when calling `asterisk_logging_log_channel_name_rotate_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'log_channel_name' in params:
            path_params['logChannelName'] = params['log_channel_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/asterisk/logging/{logChannelName}/rotate', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asterisk_modules_get(self, **kwargs):  # noqa: E501
        """List Asterisk modules.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asterisk_modules_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Module]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asterisk_modules_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.asterisk_modules_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def asterisk_modules_get_with_http_info(self, **kwargs):  # noqa: E501
        """List Asterisk modules.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asterisk_modules_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Module]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asterisk_modules_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/asterisk/modules', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Module]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asterisk_modules_module_name_delete(self, module_name, **kwargs):  # noqa: E501
        """Unload an Asterisk module.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asterisk_modules_module_name_delete(module_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str module_name: Module's name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asterisk_modules_module_name_delete_with_http_info(module_name, **kwargs)  # noqa: E501
        else:
            (data) = self.asterisk_modules_module_name_delete_with_http_info(module_name, **kwargs)  # noqa: E501
            return data

    def asterisk_modules_module_name_delete_with_http_info(self, module_name, **kwargs):  # noqa: E501
        """Unload an Asterisk module.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asterisk_modules_module_name_delete_with_http_info(module_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str module_name: Module's name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['module_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asterisk_modules_module_name_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'module_name' is set
        if ('module_name' not in params or
                params['module_name'] is None):
            raise ValueError("Missing the required parameter `module_name` when calling `asterisk_modules_module_name_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'module_name' in params:
            path_params['moduleName'] = params['module_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/asterisk/modules/{moduleName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asterisk_modules_module_name_get(self, module_name, **kwargs):  # noqa: E501
        """Get Asterisk module information.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asterisk_modules_module_name_get(module_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str module_name: Module's name (required)
        :return: Module
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asterisk_modules_module_name_get_with_http_info(module_name, **kwargs)  # noqa: E501
        else:
            (data) = self.asterisk_modules_module_name_get_with_http_info(module_name, **kwargs)  # noqa: E501
            return data

    def asterisk_modules_module_name_get_with_http_info(self, module_name, **kwargs):  # noqa: E501
        """Get Asterisk module information.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asterisk_modules_module_name_get_with_http_info(module_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str module_name: Module's name (required)
        :return: Module
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['module_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asterisk_modules_module_name_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'module_name' is set
        if ('module_name' not in params or
                params['module_name'] is None):
            raise ValueError("Missing the required parameter `module_name` when calling `asterisk_modules_module_name_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'module_name' in params:
            path_params['moduleName'] = params['module_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/asterisk/modules/{moduleName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Module',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asterisk_modules_module_name_post(self, module_name, **kwargs):  # noqa: E501
        """Load an Asterisk module.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asterisk_modules_module_name_post(module_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str module_name: Module's name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asterisk_modules_module_name_post_with_http_info(module_name, **kwargs)  # noqa: E501
        else:
            (data) = self.asterisk_modules_module_name_post_with_http_info(module_name, **kwargs)  # noqa: E501
            return data

    def asterisk_modules_module_name_post_with_http_info(self, module_name, **kwargs):  # noqa: E501
        """Load an Asterisk module.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asterisk_modules_module_name_post_with_http_info(module_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str module_name: Module's name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['module_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asterisk_modules_module_name_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'module_name' is set
        if ('module_name' not in params or
                params['module_name'] is None):
            raise ValueError("Missing the required parameter `module_name` when calling `asterisk_modules_module_name_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'module_name' in params:
            path_params['moduleName'] = params['module_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/asterisk/modules/{moduleName}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asterisk_modules_module_name_put(self, module_name, **kwargs):  # noqa: E501
        """Reload an Asterisk module.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asterisk_modules_module_name_put(module_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str module_name: Module's name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asterisk_modules_module_name_put_with_http_info(module_name, **kwargs)  # noqa: E501
        else:
            (data) = self.asterisk_modules_module_name_put_with_http_info(module_name, **kwargs)  # noqa: E501
            return data

    def asterisk_modules_module_name_put_with_http_info(self, module_name, **kwargs):  # noqa: E501
        """Reload an Asterisk module.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asterisk_modules_module_name_put_with_http_info(module_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str module_name: Module's name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['module_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asterisk_modules_module_name_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'module_name' is set
        if ('module_name' not in params or
                params['module_name'] is None):
            raise ValueError("Missing the required parameter `module_name` when calling `asterisk_modules_module_name_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'module_name' in params:
            path_params['moduleName'] = params['module_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/asterisk/modules/{moduleName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asterisk_ping_get(self, **kwargs):  # noqa: E501
        """Response pong message.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asterisk_ping_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: AsteriskPing
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asterisk_ping_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.asterisk_ping_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def asterisk_ping_get_with_http_info(self, **kwargs):  # noqa: E501
        """Response pong message.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asterisk_ping_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: AsteriskPing
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asterisk_ping_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/asterisk/ping', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AsteriskPing',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asterisk_variable_get(self, variable, **kwargs):  # noqa: E501
        """Get the value of a global variable.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asterisk_variable_get(variable, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str variable: The variable to get (required)
        :return: Variable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asterisk_variable_get_with_http_info(variable, **kwargs)  # noqa: E501
        else:
            (data) = self.asterisk_variable_get_with_http_info(variable, **kwargs)  # noqa: E501
            return data

    def asterisk_variable_get_with_http_info(self, variable, **kwargs):  # noqa: E501
        """Get the value of a global variable.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asterisk_variable_get_with_http_info(variable, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str variable: The variable to get (required)
        :return: Variable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['variable']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asterisk_variable_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'variable' is set
        if ('variable' not in params or
                params['variable'] is None):
            raise ValueError("Missing the required parameter `variable` when calling `asterisk_variable_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'variable' in params:
            query_params.append(('variable', params['variable']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/asterisk/variable', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Variable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asterisk_variable_post(self, variable, **kwargs):  # noqa: E501
        """Set the value of a global variable.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asterisk_variable_post(variable, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str variable: The variable to set (required)
        :param str value: The value to set the variable to
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asterisk_variable_post_with_http_info(variable, **kwargs)  # noqa: E501
        else:
            (data) = self.asterisk_variable_post_with_http_info(variable, **kwargs)  # noqa: E501
            return data

    def asterisk_variable_post_with_http_info(self, variable, **kwargs):  # noqa: E501
        """Set the value of a global variable.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asterisk_variable_post_with_http_info(variable, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str variable: The variable to set (required)
        :param str value: The value to set the variable to
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['variable', 'value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asterisk_variable_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'variable' is set
        if ('variable' not in params or
                params['variable'] is None):
            raise ValueError("Missing the required parameter `variable` when calling `asterisk_variable_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'variable' in params:
            query_params.append(('variable', params['variable']))  # noqa: E501
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/asterisk/variable', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
