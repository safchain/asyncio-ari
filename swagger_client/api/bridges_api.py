# coding: utf-8

"""
    localhost:8088

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class BridgesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def bridges_bridge_id_add_channel_post(self, bridge_id, channel, **kwargs):  # noqa: E501
        """Add a channel to a bridge.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bridges_bridge_id_add_channel_post(bridge_id, channel, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bridge_id: Bridge's id (required)
        :param list[str] channel: Ids of channels to add to bridge (required)
        :param str role: Channel's role in the bridge
        :param bool absorb_dtmf: Absorb DTMF coming from this channel, preventing it to pass through to the bridge
        :param bool mute: Mute audio from this channel, preventing it to pass through to the bridge
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bridges_bridge_id_add_channel_post_with_http_info(bridge_id, channel, **kwargs)  # noqa: E501
        else:
            (data) = self.bridges_bridge_id_add_channel_post_with_http_info(bridge_id, channel, **kwargs)  # noqa: E501
            return data

    def bridges_bridge_id_add_channel_post_with_http_info(self, bridge_id, channel, **kwargs):  # noqa: E501
        """Add a channel to a bridge.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bridges_bridge_id_add_channel_post_with_http_info(bridge_id, channel, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bridge_id: Bridge's id (required)
        :param list[str] channel: Ids of channels to add to bridge (required)
        :param str role: Channel's role in the bridge
        :param bool absorb_dtmf: Absorb DTMF coming from this channel, preventing it to pass through to the bridge
        :param bool mute: Mute audio from this channel, preventing it to pass through to the bridge
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bridge_id', 'channel', 'role', 'absorb_dtmf', 'mute']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bridges_bridge_id_add_channel_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bridge_id' is set
        if ('bridge_id' not in params or
                params['bridge_id'] is None):
            raise ValueError("Missing the required parameter `bridge_id` when calling `bridges_bridge_id_add_channel_post`")  # noqa: E501
        # verify the required parameter 'channel' is set
        if ('channel' not in params or
                params['channel'] is None):
            raise ValueError("Missing the required parameter `channel` when calling `bridges_bridge_id_add_channel_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bridge_id' in params:
            path_params['bridgeId'] = params['bridge_id']  # noqa: E501

        query_params = []
        if 'channel' in params:
            query_params.append(('channel', params['channel']))  # noqa: E501
            collection_formats['channel'] = 'csv'  # noqa: E501
        if 'role' in params:
            query_params.append(('role', params['role']))  # noqa: E501
        if 'absorb_dtmf' in params:
            query_params.append(('absorbDTMF', params['absorb_dtmf']))  # noqa: E501
        if 'mute' in params:
            query_params.append(('mute', params['mute']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/bridges/{bridgeId}/addChannel', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bridges_bridge_id_delete(self, bridge_id, **kwargs):  # noqa: E501
        """Shut down a bridge.  # noqa: E501

        If any channels are in this bridge, they will be removed and resume whatever they were doing beforehand.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bridges_bridge_id_delete(bridge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bridge_id: Bridge's id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bridges_bridge_id_delete_with_http_info(bridge_id, **kwargs)  # noqa: E501
        else:
            (data) = self.bridges_bridge_id_delete_with_http_info(bridge_id, **kwargs)  # noqa: E501
            return data

    def bridges_bridge_id_delete_with_http_info(self, bridge_id, **kwargs):  # noqa: E501
        """Shut down a bridge.  # noqa: E501

        If any channels are in this bridge, they will be removed and resume whatever they were doing beforehand.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bridges_bridge_id_delete_with_http_info(bridge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bridge_id: Bridge's id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bridge_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bridges_bridge_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bridge_id' is set
        if ('bridge_id' not in params or
                params['bridge_id'] is None):
            raise ValueError("Missing the required parameter `bridge_id` when calling `bridges_bridge_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bridge_id' in params:
            path_params['bridgeId'] = params['bridge_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/bridges/{bridgeId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bridges_bridge_id_get(self, bridge_id, **kwargs):  # noqa: E501
        """Get bridge details.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bridges_bridge_id_get(bridge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bridge_id: Bridge's id (required)
        :return: Bridge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bridges_bridge_id_get_with_http_info(bridge_id, **kwargs)  # noqa: E501
        else:
            (data) = self.bridges_bridge_id_get_with_http_info(bridge_id, **kwargs)  # noqa: E501
            return data

    def bridges_bridge_id_get_with_http_info(self, bridge_id, **kwargs):  # noqa: E501
        """Get bridge details.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bridges_bridge_id_get_with_http_info(bridge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bridge_id: Bridge's id (required)
        :return: Bridge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bridge_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bridges_bridge_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bridge_id' is set
        if ('bridge_id' not in params or
                params['bridge_id'] is None):
            raise ValueError("Missing the required parameter `bridge_id` when calling `bridges_bridge_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bridge_id' in params:
            path_params['bridgeId'] = params['bridge_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/bridges/{bridgeId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Bridge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bridges_bridge_id_moh_delete(self, bridge_id, **kwargs):  # noqa: E501
        """Stop playing music on hold to a bridge.  # noqa: E501

        This will only stop music on hold being played via POST bridges/{bridgeId}/moh.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bridges_bridge_id_moh_delete(bridge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bridge_id: Bridge's id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bridges_bridge_id_moh_delete_with_http_info(bridge_id, **kwargs)  # noqa: E501
        else:
            (data) = self.bridges_bridge_id_moh_delete_with_http_info(bridge_id, **kwargs)  # noqa: E501
            return data

    def bridges_bridge_id_moh_delete_with_http_info(self, bridge_id, **kwargs):  # noqa: E501
        """Stop playing music on hold to a bridge.  # noqa: E501

        This will only stop music on hold being played via POST bridges/{bridgeId}/moh.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bridges_bridge_id_moh_delete_with_http_info(bridge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bridge_id: Bridge's id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bridge_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bridges_bridge_id_moh_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bridge_id' is set
        if ('bridge_id' not in params or
                params['bridge_id'] is None):
            raise ValueError("Missing the required parameter `bridge_id` when calling `bridges_bridge_id_moh_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bridge_id' in params:
            path_params['bridgeId'] = params['bridge_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/bridges/{bridgeId}/moh', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bridges_bridge_id_moh_post(self, bridge_id, **kwargs):  # noqa: E501
        """Play music on hold to a bridge or change the MOH class that is playing.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bridges_bridge_id_moh_post(bridge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bridge_id: Bridge's id (required)
        :param str moh_class: Channel's id
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bridges_bridge_id_moh_post_with_http_info(bridge_id, **kwargs)  # noqa: E501
        else:
            (data) = self.bridges_bridge_id_moh_post_with_http_info(bridge_id, **kwargs)  # noqa: E501
            return data

    def bridges_bridge_id_moh_post_with_http_info(self, bridge_id, **kwargs):  # noqa: E501
        """Play music on hold to a bridge or change the MOH class that is playing.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bridges_bridge_id_moh_post_with_http_info(bridge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bridge_id: Bridge's id (required)
        :param str moh_class: Channel's id
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bridge_id', 'moh_class']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bridges_bridge_id_moh_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bridge_id' is set
        if ('bridge_id' not in params or
                params['bridge_id'] is None):
            raise ValueError("Missing the required parameter `bridge_id` when calling `bridges_bridge_id_moh_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bridge_id' in params:
            path_params['bridgeId'] = params['bridge_id']  # noqa: E501

        query_params = []
        if 'moh_class' in params:
            query_params.append(('mohClass', params['moh_class']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/bridges/{bridgeId}/moh', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bridges_bridge_id_play_playback_id_post(self, bridge_id, playback_id, media, **kwargs):  # noqa: E501
        """Start playback of media on a bridge.  # noqa: E501

        The media URI may be any of a number of URI's. Currently sound:, recording:, number:, digits:, characters:, and tone: URI's are supported. This operation creates a playback resource that can be used to control the playback of media (pause, rewind, fast forward, etc.)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bridges_bridge_id_play_playback_id_post(bridge_id, playback_id, media, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bridge_id: Bridge's id (required)
        :param str playback_id: Playback ID. (required)
        :param list[str] media: Media URIs to play. (required)
        :param str lang: For sounds, selects language for sound.
        :param int offsetms: Number of milliseconds to skip before playing. Only applies to the first URI if multiple media URIs are specified.
        :param int skipms: Number of milliseconds to skip for forward/reverse operations.
        :return: Playback
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bridges_bridge_id_play_playback_id_post_with_http_info(bridge_id, playback_id, media, **kwargs)  # noqa: E501
        else:
            (data) = self.bridges_bridge_id_play_playback_id_post_with_http_info(bridge_id, playback_id, media, **kwargs)  # noqa: E501
            return data

    def bridges_bridge_id_play_playback_id_post_with_http_info(self, bridge_id, playback_id, media, **kwargs):  # noqa: E501
        """Start playback of media on a bridge.  # noqa: E501

        The media URI may be any of a number of URI's. Currently sound:, recording:, number:, digits:, characters:, and tone: URI's are supported. This operation creates a playback resource that can be used to control the playback of media (pause, rewind, fast forward, etc.)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bridges_bridge_id_play_playback_id_post_with_http_info(bridge_id, playback_id, media, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bridge_id: Bridge's id (required)
        :param str playback_id: Playback ID. (required)
        :param list[str] media: Media URIs to play. (required)
        :param str lang: For sounds, selects language for sound.
        :param int offsetms: Number of milliseconds to skip before playing. Only applies to the first URI if multiple media URIs are specified.
        :param int skipms: Number of milliseconds to skip for forward/reverse operations.
        :return: Playback
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bridge_id', 'playback_id', 'media', 'lang', 'offsetms', 'skipms']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bridges_bridge_id_play_playback_id_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bridge_id' is set
        if ('bridge_id' not in params or
                params['bridge_id'] is None):
            raise ValueError("Missing the required parameter `bridge_id` when calling `bridges_bridge_id_play_playback_id_post`")  # noqa: E501
        # verify the required parameter 'playback_id' is set
        if ('playback_id' not in params or
                params['playback_id'] is None):
            raise ValueError("Missing the required parameter `playback_id` when calling `bridges_bridge_id_play_playback_id_post`")  # noqa: E501
        # verify the required parameter 'media' is set
        if ('media' not in params or
                params['media'] is None):
            raise ValueError("Missing the required parameter `media` when calling `bridges_bridge_id_play_playback_id_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bridge_id' in params:
            path_params['bridgeId'] = params['bridge_id']  # noqa: E501
        if 'playback_id' in params:
            path_params['playbackId'] = params['playback_id']  # noqa: E501

        query_params = []
        if 'media' in params:
            query_params.append(('media', params['media']))  # noqa: E501
            collection_formats['media'] = 'csv'  # noqa: E501
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'offsetms' in params:
            query_params.append(('offsetms', params['offsetms']))  # noqa: E501
        if 'skipms' in params:
            query_params.append(('skipms', params['skipms']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/bridges/{bridgeId}/play/{playbackId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Playback',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bridges_bridge_id_play_post(self, bridge_id, media, **kwargs):  # noqa: E501
        """Start playback of media on a bridge.  # noqa: E501

        The media URI may be any of a number of URI's. Currently sound:, recording:, number:, digits:, characters:, and tone: URI's are supported. This operation creates a playback resource that can be used to control the playback of media (pause, rewind, fast forward, etc.)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bridges_bridge_id_play_post(bridge_id, media, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bridge_id: Bridge's id (required)
        :param list[str] media: Media URIs to play. (required)
        :param str lang: For sounds, selects language for sound.
        :param int offsetms: Number of milliseconds to skip before playing. Only applies to the first URI if multiple media URIs are specified.
        :param int skipms: Number of milliseconds to skip for forward/reverse operations.
        :param str playback_id: Playback Id.
        :return: Playback
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bridges_bridge_id_play_post_with_http_info(bridge_id, media, **kwargs)  # noqa: E501
        else:
            (data) = self.bridges_bridge_id_play_post_with_http_info(bridge_id, media, **kwargs)  # noqa: E501
            return data

    def bridges_bridge_id_play_post_with_http_info(self, bridge_id, media, **kwargs):  # noqa: E501
        """Start playback of media on a bridge.  # noqa: E501

        The media URI may be any of a number of URI's. Currently sound:, recording:, number:, digits:, characters:, and tone: URI's are supported. This operation creates a playback resource that can be used to control the playback of media (pause, rewind, fast forward, etc.)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bridges_bridge_id_play_post_with_http_info(bridge_id, media, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bridge_id: Bridge's id (required)
        :param list[str] media: Media URIs to play. (required)
        :param str lang: For sounds, selects language for sound.
        :param int offsetms: Number of milliseconds to skip before playing. Only applies to the first URI if multiple media URIs are specified.
        :param int skipms: Number of milliseconds to skip for forward/reverse operations.
        :param str playback_id: Playback Id.
        :return: Playback
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bridge_id', 'media', 'lang', 'offsetms', 'skipms', 'playback_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bridges_bridge_id_play_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bridge_id' is set
        if ('bridge_id' not in params or
                params['bridge_id'] is None):
            raise ValueError("Missing the required parameter `bridge_id` when calling `bridges_bridge_id_play_post`")  # noqa: E501
        # verify the required parameter 'media' is set
        if ('media' not in params or
                params['media'] is None):
            raise ValueError("Missing the required parameter `media` when calling `bridges_bridge_id_play_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bridge_id' in params:
            path_params['bridgeId'] = params['bridge_id']  # noqa: E501

        query_params = []
        if 'media' in params:
            query_params.append(('media', params['media']))  # noqa: E501
            collection_formats['media'] = 'csv'  # noqa: E501
        if 'lang' in params:
            query_params.append(('lang', params['lang']))  # noqa: E501
        if 'offsetms' in params:
            query_params.append(('offsetms', params['offsetms']))  # noqa: E501
        if 'skipms' in params:
            query_params.append(('skipms', params['skipms']))  # noqa: E501
        if 'playback_id' in params:
            query_params.append(('playbackId', params['playback_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/bridges/{bridgeId}/play', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Playback',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bridges_bridge_id_post(self, bridge_id, **kwargs):  # noqa: E501
        """Create a new bridge or updates an existing one.  # noqa: E501

        This bridge persists until it has been shut down, or Asterisk has been shut down.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bridges_bridge_id_post(bridge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bridge_id: Unique ID to give to the bridge being created. (required)
        :param str type: Comma separated list of bridge type attributes (mixing, holding, dtmf_events, proxy_media, video_sfu) to set.
        :param str name: Set the name of the bridge.
        :return: Bridge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bridges_bridge_id_post_with_http_info(bridge_id, **kwargs)  # noqa: E501
        else:
            (data) = self.bridges_bridge_id_post_with_http_info(bridge_id, **kwargs)  # noqa: E501
            return data

    def bridges_bridge_id_post_with_http_info(self, bridge_id, **kwargs):  # noqa: E501
        """Create a new bridge or updates an existing one.  # noqa: E501

        This bridge persists until it has been shut down, or Asterisk has been shut down.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bridges_bridge_id_post_with_http_info(bridge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bridge_id: Unique ID to give to the bridge being created. (required)
        :param str type: Comma separated list of bridge type attributes (mixing, holding, dtmf_events, proxy_media, video_sfu) to set.
        :param str name: Set the name of the bridge.
        :return: Bridge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bridge_id', 'type', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bridges_bridge_id_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bridge_id' is set
        if ('bridge_id' not in params or
                params['bridge_id'] is None):
            raise ValueError("Missing the required parameter `bridge_id` when calling `bridges_bridge_id_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bridge_id' in params:
            path_params['bridgeId'] = params['bridge_id']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/bridges/{bridgeId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Bridge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bridges_bridge_id_record_post(self, bridge_id, name, format, **kwargs):  # noqa: E501
        """Start a recording.  # noqa: E501

        This records the mixed audio from all channels participating in this bridge.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bridges_bridge_id_record_post(bridge_id, name, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bridge_id: Bridge's id (required)
        :param str name: Recording's filename (required)
        :param str format: Format to encode audio in (required)
        :param int max_duration_seconds: Maximum duration of the recording, in seconds. 0 for no limit.
        :param int max_silence_seconds: Maximum duration of silence, in seconds. 0 for no limit.
        :param str if_exists: Action to take if a recording with the same name already exists.
        :param bool beep: Play beep when recording begins
        :param str terminate_on: DTMF input to terminate recording.
        :return: LiveRecording
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bridges_bridge_id_record_post_with_http_info(bridge_id, name, format, **kwargs)  # noqa: E501
        else:
            (data) = self.bridges_bridge_id_record_post_with_http_info(bridge_id, name, format, **kwargs)  # noqa: E501
            return data

    def bridges_bridge_id_record_post_with_http_info(self, bridge_id, name, format, **kwargs):  # noqa: E501
        """Start a recording.  # noqa: E501

        This records the mixed audio from all channels participating in this bridge.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bridges_bridge_id_record_post_with_http_info(bridge_id, name, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bridge_id: Bridge's id (required)
        :param str name: Recording's filename (required)
        :param str format: Format to encode audio in (required)
        :param int max_duration_seconds: Maximum duration of the recording, in seconds. 0 for no limit.
        :param int max_silence_seconds: Maximum duration of silence, in seconds. 0 for no limit.
        :param str if_exists: Action to take if a recording with the same name already exists.
        :param bool beep: Play beep when recording begins
        :param str terminate_on: DTMF input to terminate recording.
        :return: LiveRecording
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bridge_id', 'name', 'format', 'max_duration_seconds', 'max_silence_seconds', 'if_exists', 'beep', 'terminate_on']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bridges_bridge_id_record_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bridge_id' is set
        if ('bridge_id' not in params or
                params['bridge_id'] is None):
            raise ValueError("Missing the required parameter `bridge_id` when calling `bridges_bridge_id_record_post`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `bridges_bridge_id_record_post`")  # noqa: E501
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `bridges_bridge_id_record_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bridge_id' in params:
            path_params['bridgeId'] = params['bridge_id']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'max_duration_seconds' in params:
            query_params.append(('maxDurationSeconds', params['max_duration_seconds']))  # noqa: E501
        if 'max_silence_seconds' in params:
            query_params.append(('maxSilenceSeconds', params['max_silence_seconds']))  # noqa: E501
        if 'if_exists' in params:
            query_params.append(('ifExists', params['if_exists']))  # noqa: E501
        if 'beep' in params:
            query_params.append(('beep', params['beep']))  # noqa: E501
        if 'terminate_on' in params:
            query_params.append(('terminateOn', params['terminate_on']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/bridges/{bridgeId}/record', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LiveRecording',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bridges_bridge_id_remove_channel_post(self, bridge_id, channel, **kwargs):  # noqa: E501
        """Remove a channel from a bridge.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bridges_bridge_id_remove_channel_post(bridge_id, channel, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bridge_id: Bridge's id (required)
        :param list[str] channel: Ids of channels to remove from bridge (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bridges_bridge_id_remove_channel_post_with_http_info(bridge_id, channel, **kwargs)  # noqa: E501
        else:
            (data) = self.bridges_bridge_id_remove_channel_post_with_http_info(bridge_id, channel, **kwargs)  # noqa: E501
            return data

    def bridges_bridge_id_remove_channel_post_with_http_info(self, bridge_id, channel, **kwargs):  # noqa: E501
        """Remove a channel from a bridge.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bridges_bridge_id_remove_channel_post_with_http_info(bridge_id, channel, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bridge_id: Bridge's id (required)
        :param list[str] channel: Ids of channels to remove from bridge (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bridge_id', 'channel']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bridges_bridge_id_remove_channel_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bridge_id' is set
        if ('bridge_id' not in params or
                params['bridge_id'] is None):
            raise ValueError("Missing the required parameter `bridge_id` when calling `bridges_bridge_id_remove_channel_post`")  # noqa: E501
        # verify the required parameter 'channel' is set
        if ('channel' not in params or
                params['channel'] is None):
            raise ValueError("Missing the required parameter `channel` when calling `bridges_bridge_id_remove_channel_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bridge_id' in params:
            path_params['bridgeId'] = params['bridge_id']  # noqa: E501

        query_params = []
        if 'channel' in params:
            query_params.append(('channel', params['channel']))  # noqa: E501
            collection_formats['channel'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/bridges/{bridgeId}/removeChannel', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bridges_bridge_id_variable_get(self, bridge_id, variable, **kwargs):  # noqa: E501
        """Get the value of a bridge variable or function.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bridges_bridge_id_variable_get(bridge_id, variable, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bridge_id: Bridge's id (required)
        :param str variable: The bridge variable or function to get (required)
        :return: Variable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bridges_bridge_id_variable_get_with_http_info(bridge_id, variable, **kwargs)  # noqa: E501
        else:
            (data) = self.bridges_bridge_id_variable_get_with_http_info(bridge_id, variable, **kwargs)  # noqa: E501
            return data

    def bridges_bridge_id_variable_get_with_http_info(self, bridge_id, variable, **kwargs):  # noqa: E501
        """Get the value of a bridge variable or function.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bridges_bridge_id_variable_get_with_http_info(bridge_id, variable, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bridge_id: Bridge's id (required)
        :param str variable: The bridge variable or function to get (required)
        :return: Variable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bridge_id', 'variable']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bridges_bridge_id_variable_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bridge_id' is set
        if ('bridge_id' not in params or
                params['bridge_id'] is None):
            raise ValueError("Missing the required parameter `bridge_id` when calling `bridges_bridge_id_variable_get`")  # noqa: E501
        # verify the required parameter 'variable' is set
        if ('variable' not in params or
                params['variable'] is None):
            raise ValueError("Missing the required parameter `variable` when calling `bridges_bridge_id_variable_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bridge_id' in params:
            path_params['bridgeId'] = params['bridge_id']  # noqa: E501

        query_params = []
        if 'variable' in params:
            query_params.append(('variable', params['variable']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/bridges/{bridgeId}/variable', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Variable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bridges_bridge_id_variable_post(self, bridge_id, variable, **kwargs):  # noqa: E501
        """Set the value of a bridge variable or function.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bridges_bridge_id_variable_post(bridge_id, variable, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bridge_id: Bridge's id (required)
        :param str variable: The bridge variable or function to set (required)
        :param str value: The value to set the variable to
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bridges_bridge_id_variable_post_with_http_info(bridge_id, variable, **kwargs)  # noqa: E501
        else:
            (data) = self.bridges_bridge_id_variable_post_with_http_info(bridge_id, variable, **kwargs)  # noqa: E501
            return data

    def bridges_bridge_id_variable_post_with_http_info(self, bridge_id, variable, **kwargs):  # noqa: E501
        """Set the value of a bridge variable or function.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bridges_bridge_id_variable_post_with_http_info(bridge_id, variable, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bridge_id: Bridge's id (required)
        :param str variable: The bridge variable or function to set (required)
        :param str value: The value to set the variable to
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bridge_id', 'variable', 'value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bridges_bridge_id_variable_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bridge_id' is set
        if ('bridge_id' not in params or
                params['bridge_id'] is None):
            raise ValueError("Missing the required parameter `bridge_id` when calling `bridges_bridge_id_variable_post`")  # noqa: E501
        # verify the required parameter 'variable' is set
        if ('variable' not in params or
                params['variable'] is None):
            raise ValueError("Missing the required parameter `variable` when calling `bridges_bridge_id_variable_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bridge_id' in params:
            path_params['bridgeId'] = params['bridge_id']  # noqa: E501

        query_params = []
        if 'variable' in params:
            query_params.append(('variable', params['variable']))  # noqa: E501
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/bridges/{bridgeId}/variable', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bridges_bridge_id_video_source_channel_id_post(self, bridge_id, channel_id, **kwargs):  # noqa: E501
        """Set a channel as the video source in a multi-party mixing bridge. This operation has no effect on bridges with two or fewer participants.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bridges_bridge_id_video_source_channel_id_post(bridge_id, channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bridge_id: Bridge's id (required)
        :param str channel_id: Channel's id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bridges_bridge_id_video_source_channel_id_post_with_http_info(bridge_id, channel_id, **kwargs)  # noqa: E501
        else:
            (data) = self.bridges_bridge_id_video_source_channel_id_post_with_http_info(bridge_id, channel_id, **kwargs)  # noqa: E501
            return data

    def bridges_bridge_id_video_source_channel_id_post_with_http_info(self, bridge_id, channel_id, **kwargs):  # noqa: E501
        """Set a channel as the video source in a multi-party mixing bridge. This operation has no effect on bridges with two or fewer participants.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bridges_bridge_id_video_source_channel_id_post_with_http_info(bridge_id, channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bridge_id: Bridge's id (required)
        :param str channel_id: Channel's id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bridge_id', 'channel_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bridges_bridge_id_video_source_channel_id_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bridge_id' is set
        if ('bridge_id' not in params or
                params['bridge_id'] is None):
            raise ValueError("Missing the required parameter `bridge_id` when calling `bridges_bridge_id_video_source_channel_id_post`")  # noqa: E501
        # verify the required parameter 'channel_id' is set
        if ('channel_id' not in params or
                params['channel_id'] is None):
            raise ValueError("Missing the required parameter `channel_id` when calling `bridges_bridge_id_video_source_channel_id_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bridge_id' in params:
            path_params['bridgeId'] = params['bridge_id']  # noqa: E501
        if 'channel_id' in params:
            path_params['channelId'] = params['channel_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/bridges/{bridgeId}/videoSource/{channelId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bridges_bridge_id_video_source_delete(self, bridge_id, **kwargs):  # noqa: E501
        """Removes any explicit video source in a multi-party mixing bridge. This operation has no effect on bridges with two or fewer participants. When no explicit video source is set, talk detection will be used to determine the active video stream.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bridges_bridge_id_video_source_delete(bridge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bridge_id: Bridge's id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bridges_bridge_id_video_source_delete_with_http_info(bridge_id, **kwargs)  # noqa: E501
        else:
            (data) = self.bridges_bridge_id_video_source_delete_with_http_info(bridge_id, **kwargs)  # noqa: E501
            return data

    def bridges_bridge_id_video_source_delete_with_http_info(self, bridge_id, **kwargs):  # noqa: E501
        """Removes any explicit video source in a multi-party mixing bridge. This operation has no effect on bridges with two or fewer participants. When no explicit video source is set, talk detection will be used to determine the active video stream.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bridges_bridge_id_video_source_delete_with_http_info(bridge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bridge_id: Bridge's id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bridge_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bridges_bridge_id_video_source_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bridge_id' is set
        if ('bridge_id' not in params or
                params['bridge_id'] is None):
            raise ValueError("Missing the required parameter `bridge_id` when calling `bridges_bridge_id_video_source_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bridge_id' in params:
            path_params['bridgeId'] = params['bridge_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/bridges/{bridgeId}/videoSource', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bridges_get(self, **kwargs):  # noqa: E501
        """List all active bridges in Asterisk.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bridges_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Bridge]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bridges_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.bridges_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def bridges_get_with_http_info(self, **kwargs):  # noqa: E501
        """List all active bridges in Asterisk.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bridges_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Bridge]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bridges_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/bridges', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Bridge]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bridges_post(self, **kwargs):  # noqa: E501
        """Create a new bridge.  # noqa: E501

        This bridge persists until it has been shut down, or Asterisk has been shut down.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bridges_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: Comma separated list of bridge type attributes (mixing, holding, dtmf_events, proxy_media, video_sfu).
        :param str bridge_id: Unique ID to give to the bridge being created.
        :param str name: Name to give to the bridge being created.
        :return: Bridge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bridges_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.bridges_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def bridges_post_with_http_info(self, **kwargs):  # noqa: E501
        """Create a new bridge.  # noqa: E501

        This bridge persists until it has been shut down, or Asterisk has been shut down.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bridges_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: Comma separated list of bridge type attributes (mixing, holding, dtmf_events, proxy_media, video_sfu).
        :param str bridge_id: Unique ID to give to the bridge being created.
        :param str name: Name to give to the bridge being created.
        :return: Bridge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type', 'bridge_id', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bridges_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'bridge_id' in params:
            query_params.append(('bridgeId', params['bridge_id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/bridges', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Bridge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
