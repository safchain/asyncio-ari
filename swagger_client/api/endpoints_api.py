# coding: utf-8

"""
    localhost:8088

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class EndpointsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def endpoints_get(self, **kwargs):  # noqa: E501
        """List all endpoints.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoints_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Endpoint]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.endpoints_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.endpoints_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def endpoints_get_with_http_info(self, **kwargs):  # noqa: E501
        """List all endpoints.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoints_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Endpoint]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method endpoints_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Endpoint]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def endpoints_send_message_put(self, to, _from, **kwargs):  # noqa: E501
        """Send a message to some technology URI or endpoint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoints_send_message_put(to, _from, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str to: The endpoint resource or technology specific URI to send the message to. Valid resources are sip, pjsip, and xmpp. (required)
        :param str _from: The endpoint resource or technology specific identity to send this message from. Valid resources are sip, pjsip, and xmpp. (required)
        :param str body: The body of the message
        :param list[ConfigTuple] variables:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.endpoints_send_message_put_with_http_info(to, _from, **kwargs)  # noqa: E501
        else:
            (data) = self.endpoints_send_message_put_with_http_info(to, _from, **kwargs)  # noqa: E501
            return data

    def endpoints_send_message_put_with_http_info(self, to, _from, **kwargs):  # noqa: E501
        """Send a message to some technology URI or endpoint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoints_send_message_put_with_http_info(to, _from, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str to: The endpoint resource or technology specific URI to send the message to. Valid resources are sip, pjsip, and xmpp. (required)
        :param str _from: The endpoint resource or technology specific identity to send this message from. Valid resources are sip, pjsip, and xmpp. (required)
        :param str body: The body of the message
        :param list[ConfigTuple] variables:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['to', '_from', 'body', 'variables']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method endpoints_send_message_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `endpoints_send_message_put`")  # noqa: E501
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `endpoints_send_message_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'body' in params:
            query_params.append(('body', params['body']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'variables' in params:
            body_params = params['variables']
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/sendMessage', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def endpoints_tech_get(self, tech, **kwargs):  # noqa: E501
        """List available endoints for a given endpoint technology.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoints_tech_get(tech, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tech: Technology of the endpoints (sip,iax2,...) (required)
        :return: list[Endpoint]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.endpoints_tech_get_with_http_info(tech, **kwargs)  # noqa: E501
        else:
            (data) = self.endpoints_tech_get_with_http_info(tech, **kwargs)  # noqa: E501
            return data

    def endpoints_tech_get_with_http_info(self, tech, **kwargs):  # noqa: E501
        """List available endoints for a given endpoint technology.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoints_tech_get_with_http_info(tech, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tech: Technology of the endpoints (sip,iax2,...) (required)
        :return: list[Endpoint]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tech']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method endpoints_tech_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tech' is set
        if ('tech' not in params or
                params['tech'] is None):
            raise ValueError("Missing the required parameter `tech` when calling `endpoints_tech_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tech' in params:
            path_params['tech'] = params['tech']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/{tech}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Endpoint]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def endpoints_tech_resource_get(self, tech, resource, **kwargs):  # noqa: E501
        """Details for an endpoint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoints_tech_resource_get(tech, resource, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tech: Technology of the endpoint (required)
        :param str resource: ID of the endpoint (required)
        :return: Endpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.endpoints_tech_resource_get_with_http_info(tech, resource, **kwargs)  # noqa: E501
        else:
            (data) = self.endpoints_tech_resource_get_with_http_info(tech, resource, **kwargs)  # noqa: E501
            return data

    def endpoints_tech_resource_get_with_http_info(self, tech, resource, **kwargs):  # noqa: E501
        """Details for an endpoint.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoints_tech_resource_get_with_http_info(tech, resource, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tech: Technology of the endpoint (required)
        :param str resource: ID of the endpoint (required)
        :return: Endpoint
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tech', 'resource']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method endpoints_tech_resource_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tech' is set
        if ('tech' not in params or
                params['tech'] is None):
            raise ValueError("Missing the required parameter `tech` when calling `endpoints_tech_resource_get`")  # noqa: E501
        # verify the required parameter 'resource' is set
        if ('resource' not in params or
                params['resource'] is None):
            raise ValueError("Missing the required parameter `resource` when calling `endpoints_tech_resource_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tech' in params:
            path_params['tech'] = params['tech']  # noqa: E501
        if 'resource' in params:
            path_params['resource'] = params['resource']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/{tech}/{resource}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Endpoint',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def endpoints_tech_resource_send_message_put(self, tech, resource, _from, **kwargs):  # noqa: E501
        """Send a message to some endpoint in a technology.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoints_tech_resource_send_message_put(tech, resource, _from, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tech: Technology of the endpoint (required)
        :param str resource: ID of the endpoint (required)
        :param str _from: The endpoint resource or technology specific identity to send this message from. Valid resources are sip, pjsip, and xmpp. (required)
        :param str body: The body of the message
        :param list[ConfigTuple] variables:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.endpoints_tech_resource_send_message_put_with_http_info(tech, resource, _from, **kwargs)  # noqa: E501
        else:
            (data) = self.endpoints_tech_resource_send_message_put_with_http_info(tech, resource, _from, **kwargs)  # noqa: E501
            return data

    def endpoints_tech_resource_send_message_put_with_http_info(self, tech, resource, _from, **kwargs):  # noqa: E501
        """Send a message to some endpoint in a technology.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.endpoints_tech_resource_send_message_put_with_http_info(tech, resource, _from, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tech: Technology of the endpoint (required)
        :param str resource: ID of the endpoint (required)
        :param str _from: The endpoint resource or technology specific identity to send this message from. Valid resources are sip, pjsip, and xmpp. (required)
        :param str body: The body of the message
        :param list[ConfigTuple] variables:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tech', 'resource', '_from', 'body', 'variables']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method endpoints_tech_resource_send_message_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tech' is set
        if ('tech' not in params or
                params['tech'] is None):
            raise ValueError("Missing the required parameter `tech` when calling `endpoints_tech_resource_send_message_put`")  # noqa: E501
        # verify the required parameter 'resource' is set
        if ('resource' not in params or
                params['resource'] is None):
            raise ValueError("Missing the required parameter `resource` when calling `endpoints_tech_resource_send_message_put`")  # noqa: E501
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `endpoints_tech_resource_send_message_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tech' in params:
            path_params['tech'] = params['tech']  # noqa: E501
        if 'resource' in params:
            path_params['resource'] = params['resource']  # noqa: E501

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'body' in params:
            query_params.append(('body', params['body']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'variables' in params:
            body_params = params['variables']
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/endpoints/{tech}/{resource}/sendMessage', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
