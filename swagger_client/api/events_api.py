# coding: utf-8

"""
    localhost:8088

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class EventsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def events_get(self, app, **kwargs):  # noqa: E501
        """WebSocket connection for events.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.events_get(app, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] app: Applications to subscribe to. (required)
        :param bool subscribe_all: Subscribe to all Asterisk events. If provided, the applications listed will be subscribed to all events, effectively disabling the application specific subscriptions. Default is 'false'.
        :return: Message
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.events_get_with_http_info(app, **kwargs)  # noqa: E501
        else:
            (data) = self.events_get_with_http_info(app, **kwargs)  # noqa: E501
            return data

    def events_get_with_http_info(self, app, **kwargs):  # noqa: E501
        """WebSocket connection for events.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.events_get_with_http_info(app, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] app: Applications to subscribe to. (required)
        :param bool subscribe_all: Subscribe to all Asterisk events. If provided, the applications listed will be subscribed to all events, effectively disabling the application specific subscriptions. Default is 'false'.
        :return: Message
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app', 'subscribe_all']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method events_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app' is set
        if ('app' not in params or
                params['app'] is None):
            raise ValueError("Missing the required parameter `app` when calling `events_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'app' in params:
            query_params.append(('app', params['app']))  # noqa: E501
            collection_formats['app'] = 'csv'  # noqa: E501
        if 'subscribe_all' in params:
            query_params.append(('subscribeAll', params['subscribe_all']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Message',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def events_user_event_name_post(self, event_name, application, **kwargs):  # noqa: E501
        """Generate a user event.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.events_user_event_name_post(event_name, application, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_name: Event name (required)
        :param str application: The name of the application that will receive this event (required)
        :param list[str] source: URI for event source (channel:{channelId}, bridge:{bridgeId}, endpoint:{tech}/{resource}, deviceState:{deviceName}
        :param list[ConfigTuple] variables: The \"variables\" key in the body object holds custom key/value pairs to add to the user event. Ex. { \"variables\": { \"key\": \"value\" } }
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.events_user_event_name_post_with_http_info(event_name, application, **kwargs)  # noqa: E501
        else:
            (data) = self.events_user_event_name_post_with_http_info(event_name, application, **kwargs)  # noqa: E501
            return data

    def events_user_event_name_post_with_http_info(self, event_name, application, **kwargs):  # noqa: E501
        """Generate a user event.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.events_user_event_name_post_with_http_info(event_name, application, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_name: Event name (required)
        :param str application: The name of the application that will receive this event (required)
        :param list[str] source: URI for event source (channel:{channelId}, bridge:{bridgeId}, endpoint:{tech}/{resource}, deviceState:{deviceName}
        :param list[ConfigTuple] variables: The \"variables\" key in the body object holds custom key/value pairs to add to the user event. Ex. { \"variables\": { \"key\": \"value\" } }
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_name', 'application', 'source', 'variables']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method events_user_event_name_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_name' is set
        if ('event_name' not in params or
                params['event_name'] is None):
            raise ValueError("Missing the required parameter `event_name` when calling `events_user_event_name_post`")  # noqa: E501
        # verify the required parameter 'application' is set
        if ('application' not in params or
                params['application'] is None):
            raise ValueError("Missing the required parameter `application` when calling `events_user_event_name_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_name' in params:
            path_params['eventName'] = params['event_name']  # noqa: E501

        query_params = []
        if 'application' in params:
            query_params.append(('application', params['application']))  # noqa: E501
        if 'source' in params:
            query_params.append(('source', params['source']))  # noqa: E501
            collection_formats['source'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'variables' in params:
            body_params = params['variables']
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/events/user/{eventName}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
