# coding: utf-8

"""
    localhost:8088

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class RecordingsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def recordings_live_recording_name_delete(self, recording_name, **kwargs):  # noqa: E501
        """Stop a live recording and discard it.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recordings_live_recording_name_delete(recording_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str recording_name: The name of the recording (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.recordings_live_recording_name_delete_with_http_info(recording_name, **kwargs)  # noqa: E501
        else:
            (data) = self.recordings_live_recording_name_delete_with_http_info(recording_name, **kwargs)  # noqa: E501
            return data

    def recordings_live_recording_name_delete_with_http_info(self, recording_name, **kwargs):  # noqa: E501
        """Stop a live recording and discard it.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recordings_live_recording_name_delete_with_http_info(recording_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str recording_name: The name of the recording (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['recording_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method recordings_live_recording_name_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'recording_name' is set
        if ('recording_name' not in params or
                params['recording_name'] is None):
            raise ValueError("Missing the required parameter `recording_name` when calling `recordings_live_recording_name_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'recording_name' in params:
            path_params['recordingName'] = params['recording_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/recordings/live/{recordingName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def recordings_live_recording_name_get(self, recording_name, **kwargs):  # noqa: E501
        """List live recordings.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recordings_live_recording_name_get(recording_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str recording_name: The name of the recording (required)
        :return: LiveRecording
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.recordings_live_recording_name_get_with_http_info(recording_name, **kwargs)  # noqa: E501
        else:
            (data) = self.recordings_live_recording_name_get_with_http_info(recording_name, **kwargs)  # noqa: E501
            return data

    def recordings_live_recording_name_get_with_http_info(self, recording_name, **kwargs):  # noqa: E501
        """List live recordings.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recordings_live_recording_name_get_with_http_info(recording_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str recording_name: The name of the recording (required)
        :return: LiveRecording
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['recording_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method recordings_live_recording_name_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'recording_name' is set
        if ('recording_name' not in params or
                params['recording_name'] is None):
            raise ValueError("Missing the required parameter `recording_name` when calling `recordings_live_recording_name_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'recording_name' in params:
            path_params['recordingName'] = params['recording_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/recordings/live/{recordingName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LiveRecording',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def recordings_live_recording_name_mute_delete(self, recording_name, **kwargs):  # noqa: E501
        """Unmute a live recording.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recordings_live_recording_name_mute_delete(recording_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str recording_name: The name of the recording (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.recordings_live_recording_name_mute_delete_with_http_info(recording_name, **kwargs)  # noqa: E501
        else:
            (data) = self.recordings_live_recording_name_mute_delete_with_http_info(recording_name, **kwargs)  # noqa: E501
            return data

    def recordings_live_recording_name_mute_delete_with_http_info(self, recording_name, **kwargs):  # noqa: E501
        """Unmute a live recording.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recordings_live_recording_name_mute_delete_with_http_info(recording_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str recording_name: The name of the recording (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['recording_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method recordings_live_recording_name_mute_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'recording_name' is set
        if ('recording_name' not in params or
                params['recording_name'] is None):
            raise ValueError("Missing the required parameter `recording_name` when calling `recordings_live_recording_name_mute_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'recording_name' in params:
            path_params['recordingName'] = params['recording_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/recordings/live/{recordingName}/mute', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def recordings_live_recording_name_mute_post(self, recording_name, **kwargs):  # noqa: E501
        """Mute a live recording.  # noqa: E501

        Muting a recording suspends silence detection, which will be restarted when the recording is unmuted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recordings_live_recording_name_mute_post(recording_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str recording_name: The name of the recording (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.recordings_live_recording_name_mute_post_with_http_info(recording_name, **kwargs)  # noqa: E501
        else:
            (data) = self.recordings_live_recording_name_mute_post_with_http_info(recording_name, **kwargs)  # noqa: E501
            return data

    def recordings_live_recording_name_mute_post_with_http_info(self, recording_name, **kwargs):  # noqa: E501
        """Mute a live recording.  # noqa: E501

        Muting a recording suspends silence detection, which will be restarted when the recording is unmuted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recordings_live_recording_name_mute_post_with_http_info(recording_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str recording_name: The name of the recording (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['recording_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method recordings_live_recording_name_mute_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'recording_name' is set
        if ('recording_name' not in params or
                params['recording_name'] is None):
            raise ValueError("Missing the required parameter `recording_name` when calling `recordings_live_recording_name_mute_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'recording_name' in params:
            path_params['recordingName'] = params['recording_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/recordings/live/{recordingName}/mute', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def recordings_live_recording_name_pause_delete(self, recording_name, **kwargs):  # noqa: E501
        """Unpause a live recording.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recordings_live_recording_name_pause_delete(recording_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str recording_name: The name of the recording (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.recordings_live_recording_name_pause_delete_with_http_info(recording_name, **kwargs)  # noqa: E501
        else:
            (data) = self.recordings_live_recording_name_pause_delete_with_http_info(recording_name, **kwargs)  # noqa: E501
            return data

    def recordings_live_recording_name_pause_delete_with_http_info(self, recording_name, **kwargs):  # noqa: E501
        """Unpause a live recording.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recordings_live_recording_name_pause_delete_with_http_info(recording_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str recording_name: The name of the recording (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['recording_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method recordings_live_recording_name_pause_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'recording_name' is set
        if ('recording_name' not in params or
                params['recording_name'] is None):
            raise ValueError("Missing the required parameter `recording_name` when calling `recordings_live_recording_name_pause_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'recording_name' in params:
            path_params['recordingName'] = params['recording_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/recordings/live/{recordingName}/pause', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def recordings_live_recording_name_pause_post(self, recording_name, **kwargs):  # noqa: E501
        """Pause a live recording.  # noqa: E501

        Pausing a recording suspends silence detection, which will be restarted when the recording is unpaused. Paused time is not included in the accounting for maxDurationSeconds.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recordings_live_recording_name_pause_post(recording_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str recording_name: The name of the recording (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.recordings_live_recording_name_pause_post_with_http_info(recording_name, **kwargs)  # noqa: E501
        else:
            (data) = self.recordings_live_recording_name_pause_post_with_http_info(recording_name, **kwargs)  # noqa: E501
            return data

    def recordings_live_recording_name_pause_post_with_http_info(self, recording_name, **kwargs):  # noqa: E501
        """Pause a live recording.  # noqa: E501

        Pausing a recording suspends silence detection, which will be restarted when the recording is unpaused. Paused time is not included in the accounting for maxDurationSeconds.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recordings_live_recording_name_pause_post_with_http_info(recording_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str recording_name: The name of the recording (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['recording_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method recordings_live_recording_name_pause_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'recording_name' is set
        if ('recording_name' not in params or
                params['recording_name'] is None):
            raise ValueError("Missing the required parameter `recording_name` when calling `recordings_live_recording_name_pause_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'recording_name' in params:
            path_params['recordingName'] = params['recording_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/recordings/live/{recordingName}/pause', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def recordings_live_recording_name_stop_post(self, recording_name, **kwargs):  # noqa: E501
        """Stop a live recording and store it.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recordings_live_recording_name_stop_post(recording_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str recording_name: The name of the recording (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.recordings_live_recording_name_stop_post_with_http_info(recording_name, **kwargs)  # noqa: E501
        else:
            (data) = self.recordings_live_recording_name_stop_post_with_http_info(recording_name, **kwargs)  # noqa: E501
            return data

    def recordings_live_recording_name_stop_post_with_http_info(self, recording_name, **kwargs):  # noqa: E501
        """Stop a live recording and store it.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recordings_live_recording_name_stop_post_with_http_info(recording_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str recording_name: The name of the recording (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['recording_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method recordings_live_recording_name_stop_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'recording_name' is set
        if ('recording_name' not in params or
                params['recording_name'] is None):
            raise ValueError("Missing the required parameter `recording_name` when calling `recordings_live_recording_name_stop_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'recording_name' in params:
            path_params['recordingName'] = params['recording_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/recordings/live/{recordingName}/stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def recordings_stored_get(self, **kwargs):  # noqa: E501
        """List recordings that are complete.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recordings_stored_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[StoredRecording]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.recordings_stored_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.recordings_stored_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def recordings_stored_get_with_http_info(self, **kwargs):  # noqa: E501
        """List recordings that are complete.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recordings_stored_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[StoredRecording]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method recordings_stored_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/recordings/stored', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[StoredRecording]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def recordings_stored_recording_name_copy_post(self, recording_name, destination_recording_name, **kwargs):  # noqa: E501
        """Copy a stored recording.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recordings_stored_recording_name_copy_post(recording_name, destination_recording_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str recording_name: The name of the recording to copy (required)
        :param str destination_recording_name: The destination name of the recording (required)
        :return: StoredRecording
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.recordings_stored_recording_name_copy_post_with_http_info(recording_name, destination_recording_name, **kwargs)  # noqa: E501
        else:
            (data) = self.recordings_stored_recording_name_copy_post_with_http_info(recording_name, destination_recording_name, **kwargs)  # noqa: E501
            return data

    def recordings_stored_recording_name_copy_post_with_http_info(self, recording_name, destination_recording_name, **kwargs):  # noqa: E501
        """Copy a stored recording.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recordings_stored_recording_name_copy_post_with_http_info(recording_name, destination_recording_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str recording_name: The name of the recording to copy (required)
        :param str destination_recording_name: The destination name of the recording (required)
        :return: StoredRecording
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['recording_name', 'destination_recording_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method recordings_stored_recording_name_copy_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'recording_name' is set
        if ('recording_name' not in params or
                params['recording_name'] is None):
            raise ValueError("Missing the required parameter `recording_name` when calling `recordings_stored_recording_name_copy_post`")  # noqa: E501
        # verify the required parameter 'destination_recording_name' is set
        if ('destination_recording_name' not in params or
                params['destination_recording_name'] is None):
            raise ValueError("Missing the required parameter `destination_recording_name` when calling `recordings_stored_recording_name_copy_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'recording_name' in params:
            path_params['recordingName'] = params['recording_name']  # noqa: E501

        query_params = []
        if 'destination_recording_name' in params:
            query_params.append(('destinationRecordingName', params['destination_recording_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/recordings/stored/{recordingName}/copy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StoredRecording',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def recordings_stored_recording_name_delete(self, recording_name, **kwargs):  # noqa: E501
        """Delete a stored recording.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recordings_stored_recording_name_delete(recording_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str recording_name: The name of the recording (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.recordings_stored_recording_name_delete_with_http_info(recording_name, **kwargs)  # noqa: E501
        else:
            (data) = self.recordings_stored_recording_name_delete_with_http_info(recording_name, **kwargs)  # noqa: E501
            return data

    def recordings_stored_recording_name_delete_with_http_info(self, recording_name, **kwargs):  # noqa: E501
        """Delete a stored recording.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recordings_stored_recording_name_delete_with_http_info(recording_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str recording_name: The name of the recording (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['recording_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method recordings_stored_recording_name_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'recording_name' is set
        if ('recording_name' not in params or
                params['recording_name'] is None):
            raise ValueError("Missing the required parameter `recording_name` when calling `recordings_stored_recording_name_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'recording_name' in params:
            path_params['recordingName'] = params['recording_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/recordings/stored/{recordingName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def recordings_stored_recording_name_file_get(self, recording_name, **kwargs):  # noqa: E501
        """Get the file associated with the stored recording.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recordings_stored_recording_name_file_get(recording_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str recording_name: The name of the recording (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.recordings_stored_recording_name_file_get_with_http_info(recording_name, **kwargs)  # noqa: E501
        else:
            (data) = self.recordings_stored_recording_name_file_get_with_http_info(recording_name, **kwargs)  # noqa: E501
            return data

    def recordings_stored_recording_name_file_get_with_http_info(self, recording_name, **kwargs):  # noqa: E501
        """Get the file associated with the stored recording.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recordings_stored_recording_name_file_get_with_http_info(recording_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str recording_name: The name of the recording (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['recording_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method recordings_stored_recording_name_file_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'recording_name' is set
        if ('recording_name' not in params or
                params['recording_name'] is None):
            raise ValueError("Missing the required parameter `recording_name` when calling `recordings_stored_recording_name_file_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'recording_name' in params:
            path_params['recordingName'] = params['recording_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/recordings/stored/{recordingName}/file', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def recordings_stored_recording_name_get(self, recording_name, **kwargs):  # noqa: E501
        """Get a stored recording's details.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recordings_stored_recording_name_get(recording_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str recording_name: The name of the recording (required)
        :return: StoredRecording
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.recordings_stored_recording_name_get_with_http_info(recording_name, **kwargs)  # noqa: E501
        else:
            (data) = self.recordings_stored_recording_name_get_with_http_info(recording_name, **kwargs)  # noqa: E501
            return data

    def recordings_stored_recording_name_get_with_http_info(self, recording_name, **kwargs):  # noqa: E501
        """Get a stored recording's details.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recordings_stored_recording_name_get_with_http_info(recording_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str recording_name: The name of the recording (required)
        :return: StoredRecording
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['recording_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method recordings_stored_recording_name_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'recording_name' is set
        if ('recording_name' not in params or
                params['recording_name'] is None):
            raise ValueError("Missing the required parameter `recording_name` when calling `recordings_stored_recording_name_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'recording_name' in params:
            path_params['recordingName'] = params['recording_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/recordings/stored/{recordingName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StoredRecording',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
