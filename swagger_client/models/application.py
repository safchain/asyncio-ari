# coding: utf-8

"""
    localhost:8088

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Application(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bridge_ids': 'list[str]',
        'channel_ids': 'list[str]',
        'device_names': 'list[str]',
        'endpoint_ids': 'list[str]',
        'events_allowed': 'list[object]',
        'events_disallowed': 'list[object]',
        'name': 'str'
    }

    attribute_map = {
        'bridge_ids': 'bridge_ids',
        'channel_ids': 'channel_ids',
        'device_names': 'device_names',
        'endpoint_ids': 'endpoint_ids',
        'events_allowed': 'events_allowed',
        'events_disallowed': 'events_disallowed',
        'name': 'name'
    }

    def __init__(self, bridge_ids=None, channel_ids=None, device_names=None, endpoint_ids=None, events_allowed=None, events_disallowed=None, name=None):  # noqa: E501
        """Application - a model defined in Swagger"""  # noqa: E501

        self._bridge_ids = None
        self._channel_ids = None
        self._device_names = None
        self._endpoint_ids = None
        self._events_allowed = None
        self._events_disallowed = None
        self._name = None
        self.discriminator = None

        self.bridge_ids = bridge_ids
        self.channel_ids = channel_ids
        self.device_names = device_names
        self.endpoint_ids = endpoint_ids
        self.events_allowed = events_allowed
        self.events_disallowed = events_disallowed
        self.name = name

    @property
    def bridge_ids(self):
        """Gets the bridge_ids of this Application.  # noqa: E501

        Id's for bridges subscribed to.  # noqa: E501

        :return: The bridge_ids of this Application.  # noqa: E501
        :rtype: list[str]
        """
        return self._bridge_ids

    @bridge_ids.setter
    def bridge_ids(self, bridge_ids):
        """Sets the bridge_ids of this Application.

        Id's for bridges subscribed to.  # noqa: E501

        :param bridge_ids: The bridge_ids of this Application.  # noqa: E501
        :type: list[str]
        """
        if bridge_ids is None:
            raise ValueError("Invalid value for `bridge_ids`, must not be `None`")  # noqa: E501

        self._bridge_ids = bridge_ids

    @property
    def channel_ids(self):
        """Gets the channel_ids of this Application.  # noqa: E501

        Id's for channels subscribed to.  # noqa: E501

        :return: The channel_ids of this Application.  # noqa: E501
        :rtype: list[str]
        """
        return self._channel_ids

    @channel_ids.setter
    def channel_ids(self, channel_ids):
        """Sets the channel_ids of this Application.

        Id's for channels subscribed to.  # noqa: E501

        :param channel_ids: The channel_ids of this Application.  # noqa: E501
        :type: list[str]
        """
        if channel_ids is None:
            raise ValueError("Invalid value for `channel_ids`, must not be `None`")  # noqa: E501

        self._channel_ids = channel_ids

    @property
    def device_names(self):
        """Gets the device_names of this Application.  # noqa: E501

        Names of the devices subscribed to.  # noqa: E501

        :return: The device_names of this Application.  # noqa: E501
        :rtype: list[str]
        """
        return self._device_names

    @device_names.setter
    def device_names(self, device_names):
        """Sets the device_names of this Application.

        Names of the devices subscribed to.  # noqa: E501

        :param device_names: The device_names of this Application.  # noqa: E501
        :type: list[str]
        """
        if device_names is None:
            raise ValueError("Invalid value for `device_names`, must not be `None`")  # noqa: E501

        self._device_names = device_names

    @property
    def endpoint_ids(self):
        """Gets the endpoint_ids of this Application.  # noqa: E501

        {tech}/{resource} for endpoints subscribed to.  # noqa: E501

        :return: The endpoint_ids of this Application.  # noqa: E501
        :rtype: list[str]
        """
        return self._endpoint_ids

    @endpoint_ids.setter
    def endpoint_ids(self, endpoint_ids):
        """Sets the endpoint_ids of this Application.

        {tech}/{resource} for endpoints subscribed to.  # noqa: E501

        :param endpoint_ids: The endpoint_ids of this Application.  # noqa: E501
        :type: list[str]
        """
        if endpoint_ids is None:
            raise ValueError("Invalid value for `endpoint_ids`, must not be `None`")  # noqa: E501

        self._endpoint_ids = endpoint_ids

    @property
    def events_allowed(self):
        """Gets the events_allowed of this Application.  # noqa: E501

        Event types sent to the application.  # noqa: E501

        :return: The events_allowed of this Application.  # noqa: E501
        :rtype: list[object]
        """
        return self._events_allowed

    @events_allowed.setter
    def events_allowed(self, events_allowed):
        """Sets the events_allowed of this Application.

        Event types sent to the application.  # noqa: E501

        :param events_allowed: The events_allowed of this Application.  # noqa: E501
        :type: list[object]
        """
        if events_allowed is None:
            raise ValueError("Invalid value for `events_allowed`, must not be `None`")  # noqa: E501

        self._events_allowed = events_allowed

    @property
    def events_disallowed(self):
        """Gets the events_disallowed of this Application.  # noqa: E501

        Event types not sent to the application.  # noqa: E501

        :return: The events_disallowed of this Application.  # noqa: E501
        :rtype: list[object]
        """
        return self._events_disallowed

    @events_disallowed.setter
    def events_disallowed(self, events_disallowed):
        """Sets the events_disallowed of this Application.

        Event types not sent to the application.  # noqa: E501

        :param events_disallowed: The events_disallowed of this Application.  # noqa: E501
        :type: list[object]
        """
        if events_disallowed is None:
            raise ValueError("Invalid value for `events_disallowed`, must not be `None`")  # noqa: E501

        self._events_disallowed = events_disallowed

    @property
    def name(self):
        """Gets the name of this Application.  # noqa: E501

        Name of this application  # noqa: E501

        :return: The name of this Application.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Application.

        Name of this application  # noqa: E501

        :param name: The name of this Application.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Application, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Application):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
