# coding: utf-8

"""
    localhost:8088

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AsteriskInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'build': 'BuildInfo',
        'config': 'ConfigInfo',
        'status': 'StatusInfo',
        'system': 'SystemInfo'
    }

    attribute_map = {
        'build': 'build',
        'config': 'config',
        'status': 'status',
        'system': 'system'
    }

    def __init__(self, build=None, config=None, status=None, system=None):  # noqa: E501
        """AsteriskInfo - a model defined in Swagger"""  # noqa: E501

        self._build = None
        self._config = None
        self._status = None
        self._system = None
        self.discriminator = None

        if build is not None:
            self.build = build
        if config is not None:
            self.config = config
        if status is not None:
            self.status = status
        if system is not None:
            self.system = system

    @property
    def build(self):
        """Gets the build of this AsteriskInfo.  # noqa: E501

        Info about how Asterisk was built  # noqa: E501

        :return: The build of this AsteriskInfo.  # noqa: E501
        :rtype: BuildInfo
        """
        return self._build

    @build.setter
    def build(self, build):
        """Sets the build of this AsteriskInfo.

        Info about how Asterisk was built  # noqa: E501

        :param build: The build of this AsteriskInfo.  # noqa: E501
        :type: BuildInfo
        """

        self._build = build

    @property
    def config(self):
        """Gets the config of this AsteriskInfo.  # noqa: E501

        Info about Asterisk configuration  # noqa: E501

        :return: The config of this AsteriskInfo.  # noqa: E501
        :rtype: ConfigInfo
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this AsteriskInfo.

        Info about Asterisk configuration  # noqa: E501

        :param config: The config of this AsteriskInfo.  # noqa: E501
        :type: ConfigInfo
        """

        self._config = config

    @property
    def status(self):
        """Gets the status of this AsteriskInfo.  # noqa: E501

        Info about Asterisk status  # noqa: E501

        :return: The status of this AsteriskInfo.  # noqa: E501
        :rtype: StatusInfo
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AsteriskInfo.

        Info about Asterisk status  # noqa: E501

        :param status: The status of this AsteriskInfo.  # noqa: E501
        :type: StatusInfo
        """

        self._status = status

    @property
    def system(self):
        """Gets the system of this AsteriskInfo.  # noqa: E501

        Info about the system running Asterisk  # noqa: E501

        :return: The system of this AsteriskInfo.  # noqa: E501
        :rtype: SystemInfo
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this AsteriskInfo.

        Info about the system running Asterisk  # noqa: E501

        :param system: The system of this AsteriskInfo.  # noqa: E501
        :type: SystemInfo
        """

        self._system = system

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AsteriskInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AsteriskInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
