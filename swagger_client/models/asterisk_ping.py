# coding: utf-8

"""
    localhost:8088

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AsteriskPing(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asterisk_id': 'str',
        'ping': 'str',
        'timestamp': 'str'
    }

    attribute_map = {
        'asterisk_id': 'asterisk_id',
        'ping': 'ping',
        'timestamp': 'timestamp'
    }

    def __init__(self, asterisk_id=None, ping=None, timestamp=None):  # noqa: E501
        """AsteriskPing - a model defined in Swagger"""  # noqa: E501

        self._asterisk_id = None
        self._ping = None
        self._timestamp = None
        self.discriminator = None

        self.asterisk_id = asterisk_id
        self.ping = ping
        self.timestamp = timestamp

    @property
    def asterisk_id(self):
        """Gets the asterisk_id of this AsteriskPing.  # noqa: E501

        Asterisk id info  # noqa: E501

        :return: The asterisk_id of this AsteriskPing.  # noqa: E501
        :rtype: str
        """
        return self._asterisk_id

    @asterisk_id.setter
    def asterisk_id(self, asterisk_id):
        """Sets the asterisk_id of this AsteriskPing.

        Asterisk id info  # noqa: E501

        :param asterisk_id: The asterisk_id of this AsteriskPing.  # noqa: E501
        :type: str
        """
        if asterisk_id is None:
            raise ValueError("Invalid value for `asterisk_id`, must not be `None`")  # noqa: E501

        self._asterisk_id = asterisk_id

    @property
    def ping(self):
        """Gets the ping of this AsteriskPing.  # noqa: E501

        Always string value is pong  # noqa: E501

        :return: The ping of this AsteriskPing.  # noqa: E501
        :rtype: str
        """
        return self._ping

    @ping.setter
    def ping(self, ping):
        """Sets the ping of this AsteriskPing.

        Always string value is pong  # noqa: E501

        :param ping: The ping of this AsteriskPing.  # noqa: E501
        :type: str
        """
        if ping is None:
            raise ValueError("Invalid value for `ping`, must not be `None`")  # noqa: E501

        self._ping = ping

    @property
    def timestamp(self):
        """Gets the timestamp of this AsteriskPing.  # noqa: E501

        The timestamp string of request received time  # noqa: E501

        :return: The timestamp of this AsteriskPing.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this AsteriskPing.

        The timestamp string of request received time  # noqa: E501

        :param timestamp: The timestamp of this AsteriskPing.  # noqa: E501
        :type: str
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AsteriskPing, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AsteriskPing):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
