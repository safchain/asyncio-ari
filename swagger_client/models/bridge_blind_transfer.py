# coding: utf-8

"""
    localhost:8088

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BridgeBlindTransfer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bridge': 'Bridge',
        'channel': 'Channel',
        'context': 'str',
        'exten': 'str',
        'is_external': 'bool',
        'replace_channel': 'Channel',
        'result': 'str',
        'transferee': 'Channel'
    }

    attribute_map = {
        'bridge': 'bridge',
        'channel': 'channel',
        'context': 'context',
        'exten': 'exten',
        'is_external': 'is_external',
        'replace_channel': 'replace_channel',
        'result': 'result',
        'transferee': 'transferee'
    }

    def __init__(self, bridge=None, channel=None, context=None, exten=None, is_external=None, replace_channel=None, result=None, transferee=None):  # noqa: E501
        """BridgeBlindTransfer - a model defined in Swagger"""  # noqa: E501

        self._bridge = None
        self._channel = None
        self._context = None
        self._exten = None
        self._is_external = None
        self._replace_channel = None
        self._result = None
        self._transferee = None
        self.discriminator = None

        if bridge is not None:
            self.bridge = bridge
        self.channel = channel
        self.context = context
        self.exten = exten
        self.is_external = is_external
        if replace_channel is not None:
            self.replace_channel = replace_channel
        self.result = result
        if transferee is not None:
            self.transferee = transferee

    @property
    def bridge(self):
        """Gets the bridge of this BridgeBlindTransfer.  # noqa: E501

        The bridge being transferred  # noqa: E501

        :return: The bridge of this BridgeBlindTransfer.  # noqa: E501
        :rtype: Bridge
        """
        return self._bridge

    @bridge.setter
    def bridge(self, bridge):
        """Sets the bridge of this BridgeBlindTransfer.

        The bridge being transferred  # noqa: E501

        :param bridge: The bridge of this BridgeBlindTransfer.  # noqa: E501
        :type: Bridge
        """

        self._bridge = bridge

    @property
    def channel(self):
        """Gets the channel of this BridgeBlindTransfer.  # noqa: E501

        The channel performing the blind transfer  # noqa: E501

        :return: The channel of this BridgeBlindTransfer.  # noqa: E501
        :rtype: Channel
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this BridgeBlindTransfer.

        The channel performing the blind transfer  # noqa: E501

        :param channel: The channel of this BridgeBlindTransfer.  # noqa: E501
        :type: Channel
        """
        if channel is None:
            raise ValueError("Invalid value for `channel`, must not be `None`")  # noqa: E501

        self._channel = channel

    @property
    def context(self):
        """Gets the context of this BridgeBlindTransfer.  # noqa: E501

        The context transferred to  # noqa: E501

        :return: The context of this BridgeBlindTransfer.  # noqa: E501
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this BridgeBlindTransfer.

        The context transferred to  # noqa: E501

        :param context: The context of this BridgeBlindTransfer.  # noqa: E501
        :type: str
        """
        if context is None:
            raise ValueError("Invalid value for `context`, must not be `None`")  # noqa: E501

        self._context = context

    @property
    def exten(self):
        """Gets the exten of this BridgeBlindTransfer.  # noqa: E501

        The extension transferred to  # noqa: E501

        :return: The exten of this BridgeBlindTransfer.  # noqa: E501
        :rtype: str
        """
        return self._exten

    @exten.setter
    def exten(self, exten):
        """Sets the exten of this BridgeBlindTransfer.

        The extension transferred to  # noqa: E501

        :param exten: The exten of this BridgeBlindTransfer.  # noqa: E501
        :type: str
        """
        if exten is None:
            raise ValueError("Invalid value for `exten`, must not be `None`")  # noqa: E501

        self._exten = exten

    @property
    def is_external(self):
        """Gets the is_external of this BridgeBlindTransfer.  # noqa: E501

        Whether the transfer was externally initiated or not  # noqa: E501

        :return: The is_external of this BridgeBlindTransfer.  # noqa: E501
        :rtype: bool
        """
        return self._is_external

    @is_external.setter
    def is_external(self, is_external):
        """Sets the is_external of this BridgeBlindTransfer.

        Whether the transfer was externally initiated or not  # noqa: E501

        :param is_external: The is_external of this BridgeBlindTransfer.  # noqa: E501
        :type: bool
        """
        if is_external is None:
            raise ValueError("Invalid value for `is_external`, must not be `None`")  # noqa: E501

        self._is_external = is_external

    @property
    def replace_channel(self):
        """Gets the replace_channel of this BridgeBlindTransfer.  # noqa: E501

        The channel that is replacing transferer when the transferee(s) can not be transferred directly  # noqa: E501

        :return: The replace_channel of this BridgeBlindTransfer.  # noqa: E501
        :rtype: Channel
        """
        return self._replace_channel

    @replace_channel.setter
    def replace_channel(self, replace_channel):
        """Sets the replace_channel of this BridgeBlindTransfer.

        The channel that is replacing transferer when the transferee(s) can not be transferred directly  # noqa: E501

        :param replace_channel: The replace_channel of this BridgeBlindTransfer.  # noqa: E501
        :type: Channel
        """

        self._replace_channel = replace_channel

    @property
    def result(self):
        """Gets the result of this BridgeBlindTransfer.  # noqa: E501

        The result of the transfer attempt  # noqa: E501

        :return: The result of this BridgeBlindTransfer.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this BridgeBlindTransfer.

        The result of the transfer attempt  # noqa: E501

        :param result: The result of this BridgeBlindTransfer.  # noqa: E501
        :type: str
        """
        if result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")  # noqa: E501

        self._result = result

    @property
    def transferee(self):
        """Gets the transferee of this BridgeBlindTransfer.  # noqa: E501

        The channel that is being transferred  # noqa: E501

        :return: The transferee of this BridgeBlindTransfer.  # noqa: E501
        :rtype: Channel
        """
        return self._transferee

    @transferee.setter
    def transferee(self, transferee):
        """Sets the transferee of this BridgeBlindTransfer.

        The channel that is being transferred  # noqa: E501

        :param transferee: The transferee of this BridgeBlindTransfer.  # noqa: E501
        :type: Channel
        """

        self._transferee = transferee

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BridgeBlindTransfer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BridgeBlindTransfer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
