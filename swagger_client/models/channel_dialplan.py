# coding: utf-8

"""
    localhost:8088

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ChannelDialplan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'channel': 'Channel',
        'dialplan_app': 'str',
        'dialplan_app_data': 'str'
    }

    attribute_map = {
        'channel': 'channel',
        'dialplan_app': 'dialplan_app',
        'dialplan_app_data': 'dialplan_app_data'
    }

    def __init__(self, channel=None, dialplan_app=None, dialplan_app_data=None):  # noqa: E501
        """ChannelDialplan - a model defined in Swagger"""  # noqa: E501

        self._channel = None
        self._dialplan_app = None
        self._dialplan_app_data = None
        self.discriminator = None

        self.channel = channel
        self.dialplan_app = dialplan_app
        self.dialplan_app_data = dialplan_app_data

    @property
    def channel(self):
        """Gets the channel of this ChannelDialplan.  # noqa: E501

        The channel that changed dialplan location.  # noqa: E501

        :return: The channel of this ChannelDialplan.  # noqa: E501
        :rtype: Channel
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this ChannelDialplan.

        The channel that changed dialplan location.  # noqa: E501

        :param channel: The channel of this ChannelDialplan.  # noqa: E501
        :type: Channel
        """
        if channel is None:
            raise ValueError("Invalid value for `channel`, must not be `None`")  # noqa: E501

        self._channel = channel

    @property
    def dialplan_app(self):
        """Gets the dialplan_app of this ChannelDialplan.  # noqa: E501

        The application about to be executed.  # noqa: E501

        :return: The dialplan_app of this ChannelDialplan.  # noqa: E501
        :rtype: str
        """
        return self._dialplan_app

    @dialplan_app.setter
    def dialplan_app(self, dialplan_app):
        """Sets the dialplan_app of this ChannelDialplan.

        The application about to be executed.  # noqa: E501

        :param dialplan_app: The dialplan_app of this ChannelDialplan.  # noqa: E501
        :type: str
        """
        if dialplan_app is None:
            raise ValueError("Invalid value for `dialplan_app`, must not be `None`")  # noqa: E501

        self._dialplan_app = dialplan_app

    @property
    def dialplan_app_data(self):
        """Gets the dialplan_app_data of this ChannelDialplan.  # noqa: E501

        The data to be passed to the application.  # noqa: E501

        :return: The dialplan_app_data of this ChannelDialplan.  # noqa: E501
        :rtype: str
        """
        return self._dialplan_app_data

    @dialplan_app_data.setter
    def dialplan_app_data(self, dialplan_app_data):
        """Sets the dialplan_app_data of this ChannelDialplan.

        The data to be passed to the application.  # noqa: E501

        :param dialplan_app_data: The dialplan_app_data of this ChannelDialplan.  # noqa: E501
        :type: str
        """
        if dialplan_app_data is None:
            raise ValueError("Invalid value for `dialplan_app_data`, must not be `None`")  # noqa: E501

        self._dialplan_app_data = dialplan_app_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChannelDialplan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChannelDialplan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
