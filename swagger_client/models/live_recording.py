# coding: utf-8

"""
    localhost:8088

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LiveRecording(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cause': 'str',
        'duration': 'int',
        'format': 'str',
        'name': 'str',
        'silence_duration': 'int',
        'state': 'str',
        'talking_duration': 'int',
        'target_uri': 'str'
    }

    attribute_map = {
        'cause': 'cause',
        'duration': 'duration',
        'format': 'format',
        'name': 'name',
        'silence_duration': 'silence_duration',
        'state': 'state',
        'talking_duration': 'talking_duration',
        'target_uri': 'target_uri'
    }

    def __init__(self, cause=None, duration=None, format=None, name=None, silence_duration=None, state=None, talking_duration=None, target_uri=None):  # noqa: E501
        """LiveRecording - a model defined in Swagger"""  # noqa: E501

        self._cause = None
        self._duration = None
        self._format = None
        self._name = None
        self._silence_duration = None
        self._state = None
        self._talking_duration = None
        self._target_uri = None
        self.discriminator = None

        if cause is not None:
            self.cause = cause
        if duration is not None:
            self.duration = duration
        self.format = format
        self.name = name
        if silence_duration is not None:
            self.silence_duration = silence_duration
        self.state = state
        if talking_duration is not None:
            self.talking_duration = talking_duration
        self.target_uri = target_uri

    @property
    def cause(self):
        """Gets the cause of this LiveRecording.  # noqa: E501

        Cause for recording failure if failed  # noqa: E501

        :return: The cause of this LiveRecording.  # noqa: E501
        :rtype: str
        """
        return self._cause

    @cause.setter
    def cause(self, cause):
        """Sets the cause of this LiveRecording.

        Cause for recording failure if failed  # noqa: E501

        :param cause: The cause of this LiveRecording.  # noqa: E501
        :type: str
        """

        self._cause = cause

    @property
    def duration(self):
        """Gets the duration of this LiveRecording.  # noqa: E501

        Duration in seconds of the recording  # noqa: E501

        :return: The duration of this LiveRecording.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this LiveRecording.

        Duration in seconds of the recording  # noqa: E501

        :param duration: The duration of this LiveRecording.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def format(self):
        """Gets the format of this LiveRecording.  # noqa: E501

        Recording format (wav, gsm, etc.)  # noqa: E501

        :return: The format of this LiveRecording.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this LiveRecording.

        Recording format (wav, gsm, etc.)  # noqa: E501

        :param format: The format of this LiveRecording.  # noqa: E501
        :type: str
        """
        if format is None:
            raise ValueError("Invalid value for `format`, must not be `None`")  # noqa: E501

        self._format = format

    @property
    def name(self):
        """Gets the name of this LiveRecording.  # noqa: E501

        Base name for the recording  # noqa: E501

        :return: The name of this LiveRecording.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LiveRecording.

        Base name for the recording  # noqa: E501

        :param name: The name of this LiveRecording.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def silence_duration(self):
        """Gets the silence_duration of this LiveRecording.  # noqa: E501

        Duration of silence, in seconds, detected in the recording. This is only available if the recording was initiated with a non-zero maxSilenceSeconds.  # noqa: E501

        :return: The silence_duration of this LiveRecording.  # noqa: E501
        :rtype: int
        """
        return self._silence_duration

    @silence_duration.setter
    def silence_duration(self, silence_duration):
        """Sets the silence_duration of this LiveRecording.

        Duration of silence, in seconds, detected in the recording. This is only available if the recording was initiated with a non-zero maxSilenceSeconds.  # noqa: E501

        :param silence_duration: The silence_duration of this LiveRecording.  # noqa: E501
        :type: int
        """

        self._silence_duration = silence_duration

    @property
    def state(self):
        """Gets the state of this LiveRecording.  # noqa: E501


        :return: The state of this LiveRecording.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this LiveRecording.


        :param state: The state of this LiveRecording.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def talking_duration(self):
        """Gets the talking_duration of this LiveRecording.  # noqa: E501

        Duration of talking, in seconds, detected in the recording. This is only available if the recording was initiated with a non-zero maxSilenceSeconds.  # noqa: E501

        :return: The talking_duration of this LiveRecording.  # noqa: E501
        :rtype: int
        """
        return self._talking_duration

    @talking_duration.setter
    def talking_duration(self, talking_duration):
        """Sets the talking_duration of this LiveRecording.

        Duration of talking, in seconds, detected in the recording. This is only available if the recording was initiated with a non-zero maxSilenceSeconds.  # noqa: E501

        :param talking_duration: The talking_duration of this LiveRecording.  # noqa: E501
        :type: int
        """

        self._talking_duration = talking_duration

    @property
    def target_uri(self):
        """Gets the target_uri of this LiveRecording.  # noqa: E501

        URI for the channel or bridge being recorded  # noqa: E501

        :return: The target_uri of this LiveRecording.  # noqa: E501
        :rtype: str
        """
        return self._target_uri

    @target_uri.setter
    def target_uri(self, target_uri):
        """Sets the target_uri of this LiveRecording.

        URI for the channel or bridge being recorded  # noqa: E501

        :param target_uri: The target_uri of this LiveRecording.  # noqa: E501
        :type: str
        """
        if target_uri is None:
            raise ValueError("Invalid value for `target_uri`, must not be `None`")  # noqa: E501

        self._target_uri = target_uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LiveRecording, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LiveRecording):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
