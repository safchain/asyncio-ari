# coding: utf-8

"""
    localhost:8088

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Message(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asterisk_id': 'str',
        'type': 'str'
    }

    attribute_map = {
        'asterisk_id': 'asterisk_id',
        'type': 'type'
    }

    discriminator_value_class_map = {
        'ChannelEnteredBridge': 'ChannelEnteredBridge',
        'EndpointStateChange': 'EndpointStateChange',
        'PlaybackStarted': 'PlaybackStarted',
        'StasisEnd': 'StasisEnd',
        'ChannelMohStart': 'ChannelMohStart',
        'ChannelDialplan': 'ChannelDialplan',
        'ApplicationReplaced': 'ApplicationReplaced',
        'ChannelStateChange': 'ChannelStateChange',
        'RecordingFailed': 'RecordingFailed',
        'BridgeDestroyed': 'BridgeDestroyed',
        'BridgeMerged': 'BridgeMerged',
        'RecordingFinished': 'RecordingFinished',
        'Dial': 'Dial',
        'ContactStatusChange': 'ContactStatusChange',
        'ChannelMohStop': 'ChannelMohStop',
        'PlaybackFinished': 'PlaybackFinished',
        'BridgeCreated': 'BridgeCreated',
        'ChannelUserevent': 'ChannelUserevent',
        'ChannelCallerId': 'ChannelCallerId',
        'PlaybackContinuing': 'PlaybackContinuing',
        'PeerStatusChange': 'PeerStatusChange',
        'ChannelLeftBridge': 'ChannelLeftBridge',
        'ChannelVarset': 'ChannelVarset',
        'ChannelConnectedLine': 'ChannelConnectedLine',
        'TextMessageReceived': 'TextMessageReceived',
        'ChannelUnhold': 'ChannelUnhold',
        'ChannelDtmfReceived': 'ChannelDtmfReceived',
        'DeviceStateChanged': 'DeviceStateChanged',
        'BridgeVarset': 'BridgeVarset',
        'BridgeBlindTransfer': 'BridgeBlindTransfer',
        'RecordingStarted': 'RecordingStarted',
        'ApplicationMoveFailed': 'ApplicationMoveFailed',
        'MissingParams': 'MissingParams',
        'ChannelCreated': 'ChannelCreated',
        'ChannelHangupRequest': 'ChannelHangupRequest',
        'StasisStart': 'StasisStart',
        'ChannelTalkingFinished': 'ChannelTalkingFinished',
        'ChannelTalkingStarted': 'ChannelTalkingStarted',
        'Event': 'Event',
        'ChannelDestroyed': 'ChannelDestroyed',
        'ChannelHold': 'ChannelHold',
        'BridgeVideoSourceChanged': 'BridgeVideoSourceChanged',
        'BridgeAttendedTransfer': 'BridgeAttendedTransfer'
    }

    def __init__(self, asterisk_id=None, type=None):  # noqa: E501
        """Message - a model defined in Swagger"""  # noqa: E501

        self._asterisk_id = None
        self._type = None
        self.discriminator = 'type'

        if asterisk_id is not None:
            self.asterisk_id = asterisk_id
        self.type = type

    @property
    def asterisk_id(self):
        """Gets the asterisk_id of this Message.  # noqa: E501

        The unique ID for the Asterisk instance that raised this event.  # noqa: E501

        :return: The asterisk_id of this Message.  # noqa: E501
        :rtype: str
        """
        return self._asterisk_id

    @asterisk_id.setter
    def asterisk_id(self, asterisk_id):
        """Sets the asterisk_id of this Message.

        The unique ID for the Asterisk instance that raised this event.  # noqa: E501

        :param asterisk_id: The asterisk_id of this Message.  # noqa: E501
        :type: str
        """

        self._asterisk_id = asterisk_id

    @property
    def type(self):
        """Gets the type of this Message.  # noqa: E501

        Indicates the type of this message.  # noqa: E501

        :return: The type of this Message.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Message.

        Indicates the type of this message.  # noqa: E501

        :param type: The type of this Message.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Message, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Message):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
