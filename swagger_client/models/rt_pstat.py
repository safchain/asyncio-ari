# coding: utf-8

"""
    localhost:8088

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RTPstat(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'channel_uniqueid': 'str',
        'local_maxjitter': 'float',
        'local_maxrxploss': 'float',
        'local_minjitter': 'float',
        'local_minrxploss': 'float',
        'local_normdevjitter': 'float',
        'local_normdevrxploss': 'float',
        'local_ssrc': 'int',
        'local_stdevjitter': 'float',
        'local_stdevrxploss': 'float',
        'maxrtt': 'float',
        'minrtt': 'float',
        'normdevrtt': 'float',
        'remote_maxjitter': 'float',
        'remote_maxrxploss': 'float',
        'remote_minjitter': 'float',
        'remote_minrxploss': 'float',
        'remote_normdevjitter': 'float',
        'remote_normdevrxploss': 'float',
        'remote_ssrc': 'int',
        'remote_stdevjitter': 'float',
        'remote_stdevrxploss': 'float',
        'rtt': 'float',
        'rxcount': 'int',
        'rxjitter': 'float',
        'rxoctetcount': 'int',
        'rxploss': 'int',
        'stdevrtt': 'float',
        'txcount': 'int',
        'txjitter': 'float',
        'txoctetcount': 'int',
        'txploss': 'int'
    }

    attribute_map = {
        'channel_uniqueid': 'channel_uniqueid',
        'local_maxjitter': 'local_maxjitter',
        'local_maxrxploss': 'local_maxrxploss',
        'local_minjitter': 'local_minjitter',
        'local_minrxploss': 'local_minrxploss',
        'local_normdevjitter': 'local_normdevjitter',
        'local_normdevrxploss': 'local_normdevrxploss',
        'local_ssrc': 'local_ssrc',
        'local_stdevjitter': 'local_stdevjitter',
        'local_stdevrxploss': 'local_stdevrxploss',
        'maxrtt': 'maxrtt',
        'minrtt': 'minrtt',
        'normdevrtt': 'normdevrtt',
        'remote_maxjitter': 'remote_maxjitter',
        'remote_maxrxploss': 'remote_maxrxploss',
        'remote_minjitter': 'remote_minjitter',
        'remote_minrxploss': 'remote_minrxploss',
        'remote_normdevjitter': 'remote_normdevjitter',
        'remote_normdevrxploss': 'remote_normdevrxploss',
        'remote_ssrc': 'remote_ssrc',
        'remote_stdevjitter': 'remote_stdevjitter',
        'remote_stdevrxploss': 'remote_stdevrxploss',
        'rtt': 'rtt',
        'rxcount': 'rxcount',
        'rxjitter': 'rxjitter',
        'rxoctetcount': 'rxoctetcount',
        'rxploss': 'rxploss',
        'stdevrtt': 'stdevrtt',
        'txcount': 'txcount',
        'txjitter': 'txjitter',
        'txoctetcount': 'txoctetcount',
        'txploss': 'txploss'
    }

    def __init__(self, channel_uniqueid=None, local_maxjitter=None, local_maxrxploss=None, local_minjitter=None, local_minrxploss=None, local_normdevjitter=None, local_normdevrxploss=None, local_ssrc=None, local_stdevjitter=None, local_stdevrxploss=None, maxrtt=None, minrtt=None, normdevrtt=None, remote_maxjitter=None, remote_maxrxploss=None, remote_minjitter=None, remote_minrxploss=None, remote_normdevjitter=None, remote_normdevrxploss=None, remote_ssrc=None, remote_stdevjitter=None, remote_stdevrxploss=None, rtt=None, rxcount=None, rxjitter=None, rxoctetcount=None, rxploss=None, stdevrtt=None, txcount=None, txjitter=None, txoctetcount=None, txploss=None):  # noqa: E501
        """RTPstat - a model defined in Swagger"""  # noqa: E501

        self._channel_uniqueid = None
        self._local_maxjitter = None
        self._local_maxrxploss = None
        self._local_minjitter = None
        self._local_minrxploss = None
        self._local_normdevjitter = None
        self._local_normdevrxploss = None
        self._local_ssrc = None
        self._local_stdevjitter = None
        self._local_stdevrxploss = None
        self._maxrtt = None
        self._minrtt = None
        self._normdevrtt = None
        self._remote_maxjitter = None
        self._remote_maxrxploss = None
        self._remote_minjitter = None
        self._remote_minrxploss = None
        self._remote_normdevjitter = None
        self._remote_normdevrxploss = None
        self._remote_ssrc = None
        self._remote_stdevjitter = None
        self._remote_stdevrxploss = None
        self._rtt = None
        self._rxcount = None
        self._rxjitter = None
        self._rxoctetcount = None
        self._rxploss = None
        self._stdevrtt = None
        self._txcount = None
        self._txjitter = None
        self._txoctetcount = None
        self._txploss = None
        self.discriminator = None

        self.channel_uniqueid = channel_uniqueid
        if local_maxjitter is not None:
            self.local_maxjitter = local_maxjitter
        if local_maxrxploss is not None:
            self.local_maxrxploss = local_maxrxploss
        if local_minjitter is not None:
            self.local_minjitter = local_minjitter
        if local_minrxploss is not None:
            self.local_minrxploss = local_minrxploss
        if local_normdevjitter is not None:
            self.local_normdevjitter = local_normdevjitter
        if local_normdevrxploss is not None:
            self.local_normdevrxploss = local_normdevrxploss
        self.local_ssrc = local_ssrc
        if local_stdevjitter is not None:
            self.local_stdevjitter = local_stdevjitter
        if local_stdevrxploss is not None:
            self.local_stdevrxploss = local_stdevrxploss
        if maxrtt is not None:
            self.maxrtt = maxrtt
        if minrtt is not None:
            self.minrtt = minrtt
        if normdevrtt is not None:
            self.normdevrtt = normdevrtt
        if remote_maxjitter is not None:
            self.remote_maxjitter = remote_maxjitter
        if remote_maxrxploss is not None:
            self.remote_maxrxploss = remote_maxrxploss
        if remote_minjitter is not None:
            self.remote_minjitter = remote_minjitter
        if remote_minrxploss is not None:
            self.remote_minrxploss = remote_minrxploss
        if remote_normdevjitter is not None:
            self.remote_normdevjitter = remote_normdevjitter
        if remote_normdevrxploss is not None:
            self.remote_normdevrxploss = remote_normdevrxploss
        self.remote_ssrc = remote_ssrc
        if remote_stdevjitter is not None:
            self.remote_stdevjitter = remote_stdevjitter
        if remote_stdevrxploss is not None:
            self.remote_stdevrxploss = remote_stdevrxploss
        if rtt is not None:
            self.rtt = rtt
        self.rxcount = rxcount
        if rxjitter is not None:
            self.rxjitter = rxjitter
        self.rxoctetcount = rxoctetcount
        self.rxploss = rxploss
        if stdevrtt is not None:
            self.stdevrtt = stdevrtt
        self.txcount = txcount
        if txjitter is not None:
            self.txjitter = txjitter
        self.txoctetcount = txoctetcount
        self.txploss = txploss

    @property
    def channel_uniqueid(self):
        """Gets the channel_uniqueid of this RTPstat.  # noqa: E501

        The Asterisk channel's unique ID that owns this instance.  # noqa: E501

        :return: The channel_uniqueid of this RTPstat.  # noqa: E501
        :rtype: str
        """
        return self._channel_uniqueid

    @channel_uniqueid.setter
    def channel_uniqueid(self, channel_uniqueid):
        """Sets the channel_uniqueid of this RTPstat.

        The Asterisk channel's unique ID that owns this instance.  # noqa: E501

        :param channel_uniqueid: The channel_uniqueid of this RTPstat.  # noqa: E501
        :type: str
        """
        if channel_uniqueid is None:
            raise ValueError("Invalid value for `channel_uniqueid`, must not be `None`")  # noqa: E501

        self._channel_uniqueid = channel_uniqueid

    @property
    def local_maxjitter(self):
        """Gets the local_maxjitter of this RTPstat.  # noqa: E501

        Maximum jitter on local side.  # noqa: E501

        :return: The local_maxjitter of this RTPstat.  # noqa: E501
        :rtype: float
        """
        return self._local_maxjitter

    @local_maxjitter.setter
    def local_maxjitter(self, local_maxjitter):
        """Sets the local_maxjitter of this RTPstat.

        Maximum jitter on local side.  # noqa: E501

        :param local_maxjitter: The local_maxjitter of this RTPstat.  # noqa: E501
        :type: float
        """

        self._local_maxjitter = local_maxjitter

    @property
    def local_maxrxploss(self):
        """Gets the local_maxrxploss of this RTPstat.  # noqa: E501

        Maximum number of packets lost on local side.  # noqa: E501

        :return: The local_maxrxploss of this RTPstat.  # noqa: E501
        :rtype: float
        """
        return self._local_maxrxploss

    @local_maxrxploss.setter
    def local_maxrxploss(self, local_maxrxploss):
        """Sets the local_maxrxploss of this RTPstat.

        Maximum number of packets lost on local side.  # noqa: E501

        :param local_maxrxploss: The local_maxrxploss of this RTPstat.  # noqa: E501
        :type: float
        """

        self._local_maxrxploss = local_maxrxploss

    @property
    def local_minjitter(self):
        """Gets the local_minjitter of this RTPstat.  # noqa: E501

        Minimum jitter on local side.  # noqa: E501

        :return: The local_minjitter of this RTPstat.  # noqa: E501
        :rtype: float
        """
        return self._local_minjitter

    @local_minjitter.setter
    def local_minjitter(self, local_minjitter):
        """Sets the local_minjitter of this RTPstat.

        Minimum jitter on local side.  # noqa: E501

        :param local_minjitter: The local_minjitter of this RTPstat.  # noqa: E501
        :type: float
        """

        self._local_minjitter = local_minjitter

    @property
    def local_minrxploss(self):
        """Gets the local_minrxploss of this RTPstat.  # noqa: E501

        Minimum number of packets lost on local side.  # noqa: E501

        :return: The local_minrxploss of this RTPstat.  # noqa: E501
        :rtype: float
        """
        return self._local_minrxploss

    @local_minrxploss.setter
    def local_minrxploss(self, local_minrxploss):
        """Sets the local_minrxploss of this RTPstat.

        Minimum number of packets lost on local side.  # noqa: E501

        :param local_minrxploss: The local_minrxploss of this RTPstat.  # noqa: E501
        :type: float
        """

        self._local_minrxploss = local_minrxploss

    @property
    def local_normdevjitter(self):
        """Gets the local_normdevjitter of this RTPstat.  # noqa: E501

        Average jitter on local side.  # noqa: E501

        :return: The local_normdevjitter of this RTPstat.  # noqa: E501
        :rtype: float
        """
        return self._local_normdevjitter

    @local_normdevjitter.setter
    def local_normdevjitter(self, local_normdevjitter):
        """Sets the local_normdevjitter of this RTPstat.

        Average jitter on local side.  # noqa: E501

        :param local_normdevjitter: The local_normdevjitter of this RTPstat.  # noqa: E501
        :type: float
        """

        self._local_normdevjitter = local_normdevjitter

    @property
    def local_normdevrxploss(self):
        """Gets the local_normdevrxploss of this RTPstat.  # noqa: E501

        Average number of packets lost on local side.  # noqa: E501

        :return: The local_normdevrxploss of this RTPstat.  # noqa: E501
        :rtype: float
        """
        return self._local_normdevrxploss

    @local_normdevrxploss.setter
    def local_normdevrxploss(self, local_normdevrxploss):
        """Sets the local_normdevrxploss of this RTPstat.

        Average number of packets lost on local side.  # noqa: E501

        :param local_normdevrxploss: The local_normdevrxploss of this RTPstat.  # noqa: E501
        :type: float
        """

        self._local_normdevrxploss = local_normdevrxploss

    @property
    def local_ssrc(self):
        """Gets the local_ssrc of this RTPstat.  # noqa: E501

        Our SSRC.  # noqa: E501

        :return: The local_ssrc of this RTPstat.  # noqa: E501
        :rtype: int
        """
        return self._local_ssrc

    @local_ssrc.setter
    def local_ssrc(self, local_ssrc):
        """Sets the local_ssrc of this RTPstat.

        Our SSRC.  # noqa: E501

        :param local_ssrc: The local_ssrc of this RTPstat.  # noqa: E501
        :type: int
        """
        if local_ssrc is None:
            raise ValueError("Invalid value for `local_ssrc`, must not be `None`")  # noqa: E501

        self._local_ssrc = local_ssrc

    @property
    def local_stdevjitter(self):
        """Gets the local_stdevjitter of this RTPstat.  # noqa: E501

        Standard deviation jitter on local side.  # noqa: E501

        :return: The local_stdevjitter of this RTPstat.  # noqa: E501
        :rtype: float
        """
        return self._local_stdevjitter

    @local_stdevjitter.setter
    def local_stdevjitter(self, local_stdevjitter):
        """Sets the local_stdevjitter of this RTPstat.

        Standard deviation jitter on local side.  # noqa: E501

        :param local_stdevjitter: The local_stdevjitter of this RTPstat.  # noqa: E501
        :type: float
        """

        self._local_stdevjitter = local_stdevjitter

    @property
    def local_stdevrxploss(self):
        """Gets the local_stdevrxploss of this RTPstat.  # noqa: E501

        Standard deviation packets lost on local side.  # noqa: E501

        :return: The local_stdevrxploss of this RTPstat.  # noqa: E501
        :rtype: float
        """
        return self._local_stdevrxploss

    @local_stdevrxploss.setter
    def local_stdevrxploss(self, local_stdevrxploss):
        """Sets the local_stdevrxploss of this RTPstat.

        Standard deviation packets lost on local side.  # noqa: E501

        :param local_stdevrxploss: The local_stdevrxploss of this RTPstat.  # noqa: E501
        :type: float
        """

        self._local_stdevrxploss = local_stdevrxploss

    @property
    def maxrtt(self):
        """Gets the maxrtt of this RTPstat.  # noqa: E501

        Maximum round trip time.  # noqa: E501

        :return: The maxrtt of this RTPstat.  # noqa: E501
        :rtype: float
        """
        return self._maxrtt

    @maxrtt.setter
    def maxrtt(self, maxrtt):
        """Sets the maxrtt of this RTPstat.

        Maximum round trip time.  # noqa: E501

        :param maxrtt: The maxrtt of this RTPstat.  # noqa: E501
        :type: float
        """

        self._maxrtt = maxrtt

    @property
    def minrtt(self):
        """Gets the minrtt of this RTPstat.  # noqa: E501

        Minimum round trip time.  # noqa: E501

        :return: The minrtt of this RTPstat.  # noqa: E501
        :rtype: float
        """
        return self._minrtt

    @minrtt.setter
    def minrtt(self, minrtt):
        """Sets the minrtt of this RTPstat.

        Minimum round trip time.  # noqa: E501

        :param minrtt: The minrtt of this RTPstat.  # noqa: E501
        :type: float
        """

        self._minrtt = minrtt

    @property
    def normdevrtt(self):
        """Gets the normdevrtt of this RTPstat.  # noqa: E501

        Average round trip time.  # noqa: E501

        :return: The normdevrtt of this RTPstat.  # noqa: E501
        :rtype: float
        """
        return self._normdevrtt

    @normdevrtt.setter
    def normdevrtt(self, normdevrtt):
        """Sets the normdevrtt of this RTPstat.

        Average round trip time.  # noqa: E501

        :param normdevrtt: The normdevrtt of this RTPstat.  # noqa: E501
        :type: float
        """

        self._normdevrtt = normdevrtt

    @property
    def remote_maxjitter(self):
        """Gets the remote_maxjitter of this RTPstat.  # noqa: E501

        Maximum jitter on remote side.  # noqa: E501

        :return: The remote_maxjitter of this RTPstat.  # noqa: E501
        :rtype: float
        """
        return self._remote_maxjitter

    @remote_maxjitter.setter
    def remote_maxjitter(self, remote_maxjitter):
        """Sets the remote_maxjitter of this RTPstat.

        Maximum jitter on remote side.  # noqa: E501

        :param remote_maxjitter: The remote_maxjitter of this RTPstat.  # noqa: E501
        :type: float
        """

        self._remote_maxjitter = remote_maxjitter

    @property
    def remote_maxrxploss(self):
        """Gets the remote_maxrxploss of this RTPstat.  # noqa: E501

        Maximum number of packets lost on remote side.  # noqa: E501

        :return: The remote_maxrxploss of this RTPstat.  # noqa: E501
        :rtype: float
        """
        return self._remote_maxrxploss

    @remote_maxrxploss.setter
    def remote_maxrxploss(self, remote_maxrxploss):
        """Sets the remote_maxrxploss of this RTPstat.

        Maximum number of packets lost on remote side.  # noqa: E501

        :param remote_maxrxploss: The remote_maxrxploss of this RTPstat.  # noqa: E501
        :type: float
        """

        self._remote_maxrxploss = remote_maxrxploss

    @property
    def remote_minjitter(self):
        """Gets the remote_minjitter of this RTPstat.  # noqa: E501

        Minimum jitter on remote side.  # noqa: E501

        :return: The remote_minjitter of this RTPstat.  # noqa: E501
        :rtype: float
        """
        return self._remote_minjitter

    @remote_minjitter.setter
    def remote_minjitter(self, remote_minjitter):
        """Sets the remote_minjitter of this RTPstat.

        Minimum jitter on remote side.  # noqa: E501

        :param remote_minjitter: The remote_minjitter of this RTPstat.  # noqa: E501
        :type: float
        """

        self._remote_minjitter = remote_minjitter

    @property
    def remote_minrxploss(self):
        """Gets the remote_minrxploss of this RTPstat.  # noqa: E501

        Minimum number of packets lost on remote side.  # noqa: E501

        :return: The remote_minrxploss of this RTPstat.  # noqa: E501
        :rtype: float
        """
        return self._remote_minrxploss

    @remote_minrxploss.setter
    def remote_minrxploss(self, remote_minrxploss):
        """Sets the remote_minrxploss of this RTPstat.

        Minimum number of packets lost on remote side.  # noqa: E501

        :param remote_minrxploss: The remote_minrxploss of this RTPstat.  # noqa: E501
        :type: float
        """

        self._remote_minrxploss = remote_minrxploss

    @property
    def remote_normdevjitter(self):
        """Gets the remote_normdevjitter of this RTPstat.  # noqa: E501

        Average jitter on remote side.  # noqa: E501

        :return: The remote_normdevjitter of this RTPstat.  # noqa: E501
        :rtype: float
        """
        return self._remote_normdevjitter

    @remote_normdevjitter.setter
    def remote_normdevjitter(self, remote_normdevjitter):
        """Sets the remote_normdevjitter of this RTPstat.

        Average jitter on remote side.  # noqa: E501

        :param remote_normdevjitter: The remote_normdevjitter of this RTPstat.  # noqa: E501
        :type: float
        """

        self._remote_normdevjitter = remote_normdevjitter

    @property
    def remote_normdevrxploss(self):
        """Gets the remote_normdevrxploss of this RTPstat.  # noqa: E501

        Average number of packets lost on remote side.  # noqa: E501

        :return: The remote_normdevrxploss of this RTPstat.  # noqa: E501
        :rtype: float
        """
        return self._remote_normdevrxploss

    @remote_normdevrxploss.setter
    def remote_normdevrxploss(self, remote_normdevrxploss):
        """Sets the remote_normdevrxploss of this RTPstat.

        Average number of packets lost on remote side.  # noqa: E501

        :param remote_normdevrxploss: The remote_normdevrxploss of this RTPstat.  # noqa: E501
        :type: float
        """

        self._remote_normdevrxploss = remote_normdevrxploss

    @property
    def remote_ssrc(self):
        """Gets the remote_ssrc of this RTPstat.  # noqa: E501

        Their SSRC.  # noqa: E501

        :return: The remote_ssrc of this RTPstat.  # noqa: E501
        :rtype: int
        """
        return self._remote_ssrc

    @remote_ssrc.setter
    def remote_ssrc(self, remote_ssrc):
        """Sets the remote_ssrc of this RTPstat.

        Their SSRC.  # noqa: E501

        :param remote_ssrc: The remote_ssrc of this RTPstat.  # noqa: E501
        :type: int
        """
        if remote_ssrc is None:
            raise ValueError("Invalid value for `remote_ssrc`, must not be `None`")  # noqa: E501

        self._remote_ssrc = remote_ssrc

    @property
    def remote_stdevjitter(self):
        """Gets the remote_stdevjitter of this RTPstat.  # noqa: E501

        Standard deviation jitter on remote side.  # noqa: E501

        :return: The remote_stdevjitter of this RTPstat.  # noqa: E501
        :rtype: float
        """
        return self._remote_stdevjitter

    @remote_stdevjitter.setter
    def remote_stdevjitter(self, remote_stdevjitter):
        """Sets the remote_stdevjitter of this RTPstat.

        Standard deviation jitter on remote side.  # noqa: E501

        :param remote_stdevjitter: The remote_stdevjitter of this RTPstat.  # noqa: E501
        :type: float
        """

        self._remote_stdevjitter = remote_stdevjitter

    @property
    def remote_stdevrxploss(self):
        """Gets the remote_stdevrxploss of this RTPstat.  # noqa: E501

        Standard deviation packets lost on remote side.  # noqa: E501

        :return: The remote_stdevrxploss of this RTPstat.  # noqa: E501
        :rtype: float
        """
        return self._remote_stdevrxploss

    @remote_stdevrxploss.setter
    def remote_stdevrxploss(self, remote_stdevrxploss):
        """Sets the remote_stdevrxploss of this RTPstat.

        Standard deviation packets lost on remote side.  # noqa: E501

        :param remote_stdevrxploss: The remote_stdevrxploss of this RTPstat.  # noqa: E501
        :type: float
        """

        self._remote_stdevrxploss = remote_stdevrxploss

    @property
    def rtt(self):
        """Gets the rtt of this RTPstat.  # noqa: E501

        Total round trip time.  # noqa: E501

        :return: The rtt of this RTPstat.  # noqa: E501
        :rtype: float
        """
        return self._rtt

    @rtt.setter
    def rtt(self, rtt):
        """Sets the rtt of this RTPstat.

        Total round trip time.  # noqa: E501

        :param rtt: The rtt of this RTPstat.  # noqa: E501
        :type: float
        """

        self._rtt = rtt

    @property
    def rxcount(self):
        """Gets the rxcount of this RTPstat.  # noqa: E501

        Number of packets received.  # noqa: E501

        :return: The rxcount of this RTPstat.  # noqa: E501
        :rtype: int
        """
        return self._rxcount

    @rxcount.setter
    def rxcount(self, rxcount):
        """Sets the rxcount of this RTPstat.

        Number of packets received.  # noqa: E501

        :param rxcount: The rxcount of this RTPstat.  # noqa: E501
        :type: int
        """
        if rxcount is None:
            raise ValueError("Invalid value for `rxcount`, must not be `None`")  # noqa: E501

        self._rxcount = rxcount

    @property
    def rxjitter(self):
        """Gets the rxjitter of this RTPstat.  # noqa: E501

        Jitter on received packets.  # noqa: E501

        :return: The rxjitter of this RTPstat.  # noqa: E501
        :rtype: float
        """
        return self._rxjitter

    @rxjitter.setter
    def rxjitter(self, rxjitter):
        """Sets the rxjitter of this RTPstat.

        Jitter on received packets.  # noqa: E501

        :param rxjitter: The rxjitter of this RTPstat.  # noqa: E501
        :type: float
        """

        self._rxjitter = rxjitter

    @property
    def rxoctetcount(self):
        """Gets the rxoctetcount of this RTPstat.  # noqa: E501

        Number of octets received.  # noqa: E501

        :return: The rxoctetcount of this RTPstat.  # noqa: E501
        :rtype: int
        """
        return self._rxoctetcount

    @rxoctetcount.setter
    def rxoctetcount(self, rxoctetcount):
        """Sets the rxoctetcount of this RTPstat.

        Number of octets received.  # noqa: E501

        :param rxoctetcount: The rxoctetcount of this RTPstat.  # noqa: E501
        :type: int
        """
        if rxoctetcount is None:
            raise ValueError("Invalid value for `rxoctetcount`, must not be `None`")  # noqa: E501

        self._rxoctetcount = rxoctetcount

    @property
    def rxploss(self):
        """Gets the rxploss of this RTPstat.  # noqa: E501

        Number of received packets lost.  # noqa: E501

        :return: The rxploss of this RTPstat.  # noqa: E501
        :rtype: int
        """
        return self._rxploss

    @rxploss.setter
    def rxploss(self, rxploss):
        """Sets the rxploss of this RTPstat.

        Number of received packets lost.  # noqa: E501

        :param rxploss: The rxploss of this RTPstat.  # noqa: E501
        :type: int
        """
        if rxploss is None:
            raise ValueError("Invalid value for `rxploss`, must not be `None`")  # noqa: E501

        self._rxploss = rxploss

    @property
    def stdevrtt(self):
        """Gets the stdevrtt of this RTPstat.  # noqa: E501

        Standard deviation round trip time.  # noqa: E501

        :return: The stdevrtt of this RTPstat.  # noqa: E501
        :rtype: float
        """
        return self._stdevrtt

    @stdevrtt.setter
    def stdevrtt(self, stdevrtt):
        """Sets the stdevrtt of this RTPstat.

        Standard deviation round trip time.  # noqa: E501

        :param stdevrtt: The stdevrtt of this RTPstat.  # noqa: E501
        :type: float
        """

        self._stdevrtt = stdevrtt

    @property
    def txcount(self):
        """Gets the txcount of this RTPstat.  # noqa: E501

        Number of packets transmitted.  # noqa: E501

        :return: The txcount of this RTPstat.  # noqa: E501
        :rtype: int
        """
        return self._txcount

    @txcount.setter
    def txcount(self, txcount):
        """Sets the txcount of this RTPstat.

        Number of packets transmitted.  # noqa: E501

        :param txcount: The txcount of this RTPstat.  # noqa: E501
        :type: int
        """
        if txcount is None:
            raise ValueError("Invalid value for `txcount`, must not be `None`")  # noqa: E501

        self._txcount = txcount

    @property
    def txjitter(self):
        """Gets the txjitter of this RTPstat.  # noqa: E501

        Jitter on transmitted packets.  # noqa: E501

        :return: The txjitter of this RTPstat.  # noqa: E501
        :rtype: float
        """
        return self._txjitter

    @txjitter.setter
    def txjitter(self, txjitter):
        """Sets the txjitter of this RTPstat.

        Jitter on transmitted packets.  # noqa: E501

        :param txjitter: The txjitter of this RTPstat.  # noqa: E501
        :type: float
        """

        self._txjitter = txjitter

    @property
    def txoctetcount(self):
        """Gets the txoctetcount of this RTPstat.  # noqa: E501

        Number of octets transmitted.  # noqa: E501

        :return: The txoctetcount of this RTPstat.  # noqa: E501
        :rtype: int
        """
        return self._txoctetcount

    @txoctetcount.setter
    def txoctetcount(self, txoctetcount):
        """Sets the txoctetcount of this RTPstat.

        Number of octets transmitted.  # noqa: E501

        :param txoctetcount: The txoctetcount of this RTPstat.  # noqa: E501
        :type: int
        """
        if txoctetcount is None:
            raise ValueError("Invalid value for `txoctetcount`, must not be `None`")  # noqa: E501

        self._txoctetcount = txoctetcount

    @property
    def txploss(self):
        """Gets the txploss of this RTPstat.  # noqa: E501

        Number of transmitted packets lost.  # noqa: E501

        :return: The txploss of this RTPstat.  # noqa: E501
        :rtype: int
        """
        return self._txploss

    @txploss.setter
    def txploss(self, txploss):
        """Sets the txploss of this RTPstat.

        Number of transmitted packets lost.  # noqa: E501

        :param txploss: The txploss of this RTPstat.  # noqa: E501
        :type: int
        """
        if txploss is None:
            raise ValueError("Invalid value for `txploss`, must not be `None`")  # noqa: E501

        self._txploss = txploss

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RTPstat, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RTPstat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
